{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/lib/utils.ts","webpack:///./src/lib/store.ts","webpack:///./src/lib/history.ts","webpack:///./node_modules/lit-html/lib/directive.js","webpack:///./node_modules/lit-html/lib/dom.js","webpack:///./node_modules/lit-html/lib/part.js","webpack:///./node_modules/lit-html/lib/template.js","webpack:///./node_modules/lit-html/lib/template-instance.js","webpack:///./node_modules/lit-html/lib/template-result.js","webpack:///./node_modules/lit-html/lib/parts.js","webpack:///./node_modules/lit-html/lib/default-template-processor.js","webpack:///./node_modules/lit-html/lib/template-factory.js","webpack:///./node_modules/lit-html/lib/render.js","webpack:///./node_modules/lit-html/lit-html.js","webpack:///./node_modules/lit-html/directives/repeat.js","webpack:///./node_modules/lit-html/directives/guard.js","webpack:///./node_modules/lit-html/directives/if-defined.js","webpack:///./src/lib/element.ts","webpack:///./src/examples/perf-demo/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","updaterSet","Set","addMicrotask","func","size","globalThis","queueMicrotask","forEach","clear","delete","add","EventTarget","Image","Pool","super","currentId","count","pool","Map","setPrototypeOf","this","item","dispatchEvent","CustomEvent","set","QueryString","URLSearchParams","param","query","fromEntries","entries","keys","append","string","toString","raw","arr","args","reduce","prev","current","index","WeakMap","cleanObject","GemError","Error","msg","message","emptyFunction","HANDLES_KEY","createStore","originStore","store","writable","updateStore","assign","window","history","location","pushState","replaceState","getKey","$hasCloseHandle","$hasOpenHandle","$hasShouldCloseHandle","$key","paramsMap","validData","data","getAbsolutePath","relativePath","basePath","getRelativePath","realPath","replace","RegExp","initParams","params","title","path","pathname","search","changePath","hash","updateHistory","type","state","close","open","shouldClose","url","prevHave","updateHistoryByNative","originUrl","URL","origin","basePathStore","defineProperties","v","getParams","updateParams","push","pushIgnoreCloseHandle","back","document","navigating","addEventListener","event","newState","has","prevState","prevParams","closeHandle","shouldCloseHandle","forward","directives","f","isDirective","isCEPolyfill","undefined","customElements","polyfillWrapFlushCallback","reparentNodes","container","start","end","before","nextSibling","insertBefore","removeNodes","removeChild","noChange","nothing","marker","String","Math","random","slice","nodeMarker","markerRegex","boundAttributeSuffix","Template","result","element","parts","nodesToRemove","stack","walker","createTreeWalker","content","lastPartIndex","partIndex","strings","values","length","node","nextNode","nodeType","hasAttributes","attributes","endsWith","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","tagName","currentNode","indexOf","parent","parentNode","lastIndex","insert","createMarker","match","createTextNode","previousSibling","pop","str","suffix","isTemplatePartActive","part","createComment","template","processor","options","__parts","setValue","commit","fragment","cloneNode","importNode","nodeIndex","nodeName","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","commentMarker","html","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","createElement","innerHTML","getHTML","getTemplateElement","svgElement","firstChild","isPrimitive","isIterable","Array","isArray","iterator","AttributeCommitter","dirty","_createPart","text","setAttribute","_getValue","committer","directive","__pendingValue","startNode","appendChild","endNode","ref","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","valueAsString","templateFactory","update","instance","_clone","itemParts","itemPart","appendIntoPart","insertAfterPart","PropertyCommitter","single","PropertyPart","eventOptionsSupported","removeEventListener","_e","eventName","eventContext","__boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","capture","once","passive","shouldAddListener","__options","getOptions","defaultTemplateProcessor","prefix","templateCache","templateCaches","stringsArray","keyString","join","createAndInsertPart","containerPart","beforePart","beforeNode","newPart","updatePart","insertPartBefore","removePart","generateMap","list","map","partListCache","keyListCache","repeat","items","keyFnOrTemplate","keyFn","oldParts","oldKeys","newParts","newValues","newKeys","newKeyToIndexMap","oldKeyToIndexMap","oldHead","oldTail","newHead","newTail","oldIndex","oldPart","previousValues","guard","previousValue","every","from","ifDefined","litHtml","svg","render","appendInto","__litHtml","HTMLElement","shadow","setState","willMount","mounted","shouldUpdate","__update","updated","attributeChanged","propertyChanged","unmounted","__renderRoot","attachShadow","observedAttributes","observedPropertys","defineEvents","observedStores","adoptedStyleSheets","attr","prop","_substr","$1","toUpperCase","kebabToCamelCase","configurable","__connectProperty","connect","shadowRoot","concat","__internals","attachInternals","isEventHandle","propValue","detail","evt","__isMounted","payload","_name","_oldValue","_newValue","oldValue","newValue","callback","__unmountCallback","constructor","disconnect","GemElement","__connectedCallback","renderTaskPool","loop","tick","requestAnimationFrame","timestamp","task","performance","now","AsyncGemElement","define","Class","number","setInterval","onmouseenter","hover","onmouseleave","style","width","height","left","x","top","y","borderRadius","lineHeight","background","targetSize","elapsed","scale","transform","body","app","Date"],"mappings":"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","file":"bundle.dec8620fc77854035bf8.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/gem/build/perf-demo/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","const updaterSet = new Set<Function>();\nexport function addMicrotask(func: Function) {\n  if (!updaterSet.size) {\n    // delayed execution callback after updating store\n    globalThis.queueMicrotask(() => {\n      updaterSet.forEach(func => func());\n      updaterSet.clear();\n    });\n  }\n  updaterSet.delete(func);\n  updaterSet.add(func);\n}\n\ninterface PoolEventMap {\n  start: Event;\n  end: Event;\n}\n\n/**\n * `EventTarget` safari not support\n * https://bugs.webkit.org/show_bug.cgi?id=174313\n */\nconst EventTarget = globalThis.Image || Object; // support nodejs\nexport class Pool<T> extends EventTarget {\n  addEventListener: <K extends keyof PoolEventMap>(\n    type: K,\n    listener: (this: Pool<T>, ev: PoolEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions,\n  ) => void;\n  constructor() {\n    super();\n    // https://bugs.webkit.org/show_bug.cgi?id=198674\n    Object.setPrototypeOf(this, Pool.prototype);\n  }\n  currentId = 0;\n  count = 0;\n  pool = new Map<number, T>();\n\n  add(item: T) {\n    if (!this.pool.size) this.dispatchEvent(new CustomEvent('start'));\n    this.pool.set(this.count, item);\n    this.count += 1;\n  }\n\n  get(): T | undefined {\n    const item = this.pool.get(this.currentId);\n    if (item) {\n      this.pool.delete(this.currentId);\n      this.currentId += 1;\n      if (!this.pool.size) this.dispatchEvent(new CustomEvent('end'));\n    }\n    return item;\n  }\n}\n\ndeclare global {\n  interface URLSearchParams {\n    entries(): Iterable<readonly [string | number | symbol, any]>;\n  }\n}\nexport class QueryString extends URLSearchParams {\n  constructor(param: any) {\n    if (param instanceof QueryString) {\n      return param;\n    }\n    super(param);\n    /**\n     * can't extend `URLSearchParams`\n     * https://bugs.webkit.org/show_bug.cgi?id=198674\n     */\n    Object.setPrototypeOf(this, QueryString.prototype);\n  }\n\n  concat(param: any) {\n    let query: any;\n    if (typeof param === 'string') {\n      query = Object.fromEntries(new URLSearchParams(param).entries());\n    } else {\n      query = param;\n    }\n    Object.keys(query).forEach(key => {\n      this.append(key, query[key]);\n    });\n  }\n\n  toString() {\n    const string = super.toString();\n    return string ? `?${string}` : '';\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\n// 写 html 文本\nexport function raw(arr: TemplateStringsArray, ...args: any[]) {\n  return arr.reduce((prev, current, index) => prev + (args[index - 1] || '') + current);\n}\n\n// 写 css 文本，在 CSSStyleSheet 中使用\nexport function css(arr: TemplateStringsArray, ...args: any[]) {\n  return raw(arr, ...args);\n}\n\nexport type Sheet<T> = {\n  [P in keyof T]: P;\n};\n\ndeclare global {\n  interface CSSStyleSheet {\n    replaceSync: (str: string) => void;\n    // 作为 CSSStyleSheet 用的同时能作为原始对象读取属性\n    [selector: string]: any;\n  }\n\n  interface CSSRuleList {\n    item(index: number): CSSStyleRule;\n  }\n  interface ShadowRoot {\n    adoptedStyleSheets: Sheet<unknown>[];\n  }\n  interface Document {\n    adoptedStyleSheets: Sheet<unknown>[];\n  }\n}\n\ntype StyledType = 'id' | 'class' | 'tag';\ninterface StyledValue {\n  str: string;\n  key: string;\n  type: StyledType;\n}\ninterface StyledValues {\n  [index: string]: StyledValue;\n}\n\nconst rulesWeakMap = new WeakMap<Sheet<unknown>, any>();\n/**\n * !!! 目前只有 Chrome 支持\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1520690\n *\n * 创建 style sheet 用于 `adoptedStyleSheets`\n * @param rules string 不能动态更新的 css\n * @param mediaQuery string 媒体查询\n */\nexport function createCSSSheet<T extends StyledValues>(\n  rules: T | string,\n  mediaQuery = '',\n): T extends string ? CSSStyleSheet : Sheet<T> {\n  let cssSheet = rulesWeakMap.get(rules);\n  if (!cssSheet) {\n    const sheet = new CSSStyleSheet();\n    sheet.media.mediaText = mediaQuery;\n    let style = '';\n    if (typeof rules === 'string') {\n      style = rules;\n    } else {\n      Object.keys(rules).forEach(key => {\n        sheet[key] = rules[key].type === 'tag' ? key : `${key}-${rules[key].key}`;\n        style += rules[key].str.replace(/&/g, sheet[key]);\n      });\n      rulesWeakMap.set(rules, sheet);\n    }\n    sheet.replaceSync(style);\n    cssSheet = sheet;\n  }\n  return cssSheet;\n}\n\nfunction randomStr(number = 5, origin = '0123456789abcdefghijklmnopqrstuvwxyz') {\n  const len = origin.length;\n  let str = '';\n  for (let i = 0; i < number; i++) {\n    str += origin[Math.floor(Math.random() * len)];\n  }\n  return str;\n}\n\n// 只支持一层嵌套\n// https://drafts.csswg.org/css-nesting-1/\nfunction flatStyled(style: string, type: StyledType): StyledValue {\n  const subStyle: string[] = [];\n  let str =\n    `& {${style.replace(new RegExp('&.*{(.*)}', 'gs'), function(substr) {\n      subStyle.push(substr);\n      return '';\n    })}}` + subStyle.join('');\n  if (type !== 'tag') str = str.replace(/&/g, type === 'class' ? '.&' : '#&');\n  return { str, key: randomStr(), type };\n}\n\n// 写 css 文本，在 CSSStyleSheet 中使用，使用 styed-components 高亮\n//\n// createCSSSheet({\n//   red: styled.class`\n//     background: red;\n//     &:hover {\n//       background: blue;\n//     }\n//   `,\n// });\n\nexport const styled = {\n  class: (arr: TemplateStringsArray, ...args: any[]) => {\n    const style = raw(arr, ...args);\n    return flatStyled(style, 'class');\n  },\n  id: (arr: TemplateStringsArray, ...args: any[]) => {\n    const style = raw(arr, ...args);\n    return flatStyled(style, 'id');\n  },\n  tag: (arr: TemplateStringsArray, ...args: any[]) => {\n    const style = raw(arr, ...args);\n    return flatStyled(style, 'tag');\n  },\n};\n\nexport function camelToKebabCase(str: string) {\n  return str.replace(/[A-Z]/g, ($1: string) => '-' + $1.toLowerCase());\n}\n\nexport function kebabToCamelCase(str: string) {\n  return str.replace(/-(.)/g, (_substr, $1: string) => $1.toUpperCase());\n}\n\nexport function cleanObject<T extends object>(o: T) {\n  Object.keys(o).forEach((key: string) => {\n    const k = key as keyof T;\n    delete o[k];\n  });\n  return o;\n}\n\nexport class GemError extends Error {\n  constructor(msg: string) {\n    super(msg);\n    this.message = `gem: ${this.message}`;\n  }\n}\n\nexport function emptyFunction() {\n  // 用于占位的空函数\n}\n","import { addMicrotask } from './utils';\n\n// 不使用符号，方便跨 Realms\nexport const HANDLES_KEY = 'gem@storeHandlesKey';\n\nexport interface StoreTrait {\n  [HANDLES_KEY]: Set<Function>;\n}\n\nexport type Store<T> = T & StoreTrait;\n\nexport type StoreSet<T> = {\n  [P in keyof T]: T[P] & Store<T[P]>;\n};\n\nexport function createStore<T extends object>(originStore: T): Store<T> {\n  const store = originStore as Store<T>;\n  // 序列化时忽略\n  Object.defineProperty(store, HANDLES_KEY, { enumerable: false, value: new Set<Function>(), writable: true });\n  return store;\n}\n\ninterface StoreObjectSet {\n  [store: string]: object;\n}\nexport function createStoreSet<T extends StoreObjectSet>(originStoreSet: T) {\n  const keys = Object.keys(originStoreSet);\n  keys.forEach(key => {\n    const store = originStoreSet[key] as any;\n    createStore(store as object);\n  });\n\n  return originStoreSet as StoreSet<T>;\n}\n\nexport function updateStore<T extends Store<unknown>>(store: T, value: Partial<Omit<T, keyof StoreTrait>> | undefined) {\n  Object.assign(store, value);\n  const listeners = store[HANDLES_KEY];\n  listeners.forEach(func => {\n    addMicrotask(func);\n  });\n}\n\nexport function connect<T extends Store<unknown>>(store: T, func: Function) {\n  const listeners = store[HANDLES_KEY];\n  listeners.add(func);\n}\n\nexport function disconnect<T extends Store<unknown>>(store: T, func: Function) {\n  const listeners = store[HANDLES_KEY];\n  listeners.delete(func);\n}\n","import { createStore, updateStore, Store } from './store';\nimport { QueryString, cleanObject, GemError } from './utils';\n\nexport const history = window.history;\nconst location = window.location;\nconst pushState: typeof history.pushState = history.pushState.bind(history);\nconst replaceState: typeof history.replaceState = history.replaceState.bind(history);\n\nlet key = 0;\nconst getKey = () => ++key;\n\n// history.state\nexport interface HistoryItem {\n  $hasCloseHandle: boolean;\n  $hasOpenHandle: boolean;\n  $hasShouldCloseHandle: boolean;\n  $key: number;\n  [index: string]: any;\n}\n\nconst store = createStore<HistoryItem>({\n  $hasCloseHandle: false,\n  $hasOpenHandle: false,\n  $hasShouldCloseHandle: false,\n  $key: 0,\n});\n\nexport interface UpdateHistoryParams {\n  title?: string;\n  path?: string; // 不包括 basePath，只有根目录储存末尾斜杠\n  query?: string | QueryString; // 包含 `?`\n  hash?: string; // 包含 `#`\n  open?: Function; // 按下前进键时执行\n  close?: Function; // 按下返回键时执行\n  shouldClose?: () => boolean; // 按下返回键时判断是否执行 close 函数，返回为 false 时不执行，并恢复 history\n  data?: any;\n}\n\n// 实际应用值\ntype HistoryParams = UpdateHistoryParams & { title: string; path: string; query: QueryString; hash: string };\n\n// TODO: WeakRef\nconst paramsMap = new Map<number, HistoryParams>();\n\ndeclare global {\n  interface History {\n    store: Store<HistoryItem>;\n    basePath?: string;\n    getParams: () => HistoryParams;\n\n    push: (params: UpdateHistoryParams) => void;\n    replace: (params: UpdateHistoryParams) => void;\n    // push 一条历史记录\n    // 有 close 处理函数时先执行 closeHandle 在 replace\n    // 比如在 modal 打开时跳转页面\n    // 不完美：只支持在 1 级 modal 中切换页面\n    pushIgnoreCloseHandle: (params: UpdateHistoryParams) => void;\n    updateParams: (params: Omit<UpdateHistoryParams, 'path' | 'query' | 'hash' | 'state'>) => void;\n  }\n}\n\ntype UpdateHistoryType = 'push' | 'replace';\n\nfunction validData(data: any) {\n  if (data?.$key) throw new GemError('`$key` is not allowed');\n  if (data?.$hasCloseHandle) throw new GemError('`$hasCloseHandle` is not allowed');\n  if (data?.$hasOpenHandle) throw new GemError('`$hasOpenHandle` is not allowed');\n  if (data?.$hasShouldCloseHandle) throw new GemError('`$hasShouldCloseHandle` is not allowed');\n}\n\n// 并非实际路径 `location.pathname`\nfunction getAbsolutePath(relativePath: string) {\n  if (history.basePath) {\n    return history.basePath + (relativePath === '/' ? '' : relativePath);\n  }\n  return relativePath;\n}\n\nfunction getRelativePath(realPath: string) {\n  return realPath.replace(new RegExp(`^${history.basePath}`), '');\n}\n\nfunction initParams(params: UpdateHistoryParams): HistoryParams {\n  const title = params.title || '';\n  // 没提供 path 使用当前 path\n  const path = params.path || getRelativePath(location.pathname);\n  // 没提供 query 又没有提供 path 时使用当前 search\n  const query = new QueryString(params.query || (params.path ? '' : location.search));\n  const changePath = params.path || params.query;\n  // 没提供 hash 又没有改变路径时使用当前 hash\n  const hash = params.hash || (changePath ? '' : location.hash);\n  return { ...params, title, path, query, hash };\n}\n\nfunction updateHistory(type: UpdateHistoryType, p: UpdateHistoryParams) {\n  validData(p.data);\n  const params = initParams(p);\n  const { title, path, query, hash } = params;\n  const state = {\n    $hasCloseHandle: !!params.close,\n    $hasOpenHandle: !!params.open,\n    $hasShouldCloseHandle: !!params.shouldClose,\n    $key: getKey(),\n    ...(params.data || {}),\n  };\n  paramsMap.set(state.$key, params);\n  updateStore(cleanObject(store), state);\n  const url = getAbsolutePath(path) + new QueryString(query) + hash;\n  const prevHave = location.hash;\n  (type === 'push' ? pushState : replaceState)(state, title, url);\n  if (prevHave !== hash) window.dispatchEvent(new CustomEvent('hashchange'));\n}\n\n// 跨框架时，调用者对 basePath 无感知\nfunction updateHistoryByNative(type: UpdateHistoryType, data: any, title: string, originUrl: string) {\n  validData(data);\n  const state = {\n    $key: getKey(),\n    ...(data || {}),\n  };\n  const { pathname, search, hash } = new URL(originUrl, location.origin);\n  const params = initParams({ path: pathname, query: new QueryString(search), hash, title, data });\n  paramsMap.set(state.$key, params);\n  updateStore(cleanObject(store), state);\n  const url = getAbsolutePath(pathname) + params.query + hash;\n  const prevHave = location.hash;\n  (type === 'push' ? pushState : replaceState)(state, title, url);\n  if (prevHave !== hash) window.dispatchEvent(new CustomEvent('hashchange'));\n}\n\nexport const basePathStore = createStore({\n  basePath: '',\n});\n\nif (!('basePath' in history)) {\n  // 不允许其他框架重写\n  // 保持原有功能\n  Object.defineProperties(history, {\n    basePath: {\n      get() {\n        return basePathStore.basePath;\n      },\n      set(v: string) {\n        if (!basePathStore.basePath) {\n          // 应用初始化的时候设置\n          updateStore(basePathStore, { basePath: v });\n          // paramsMap 更新后 ui 才会更新\n          Object.assign(paramsMap.get(store.$key), { path: getRelativePath(location.pathname) });\n        } else {\n          throw new GemError('已经有其他环境使用 gem , 会共享 history 对象，禁止再修改 history 对象');\n        }\n      },\n    },\n    getParams: {\n      value: function() {\n        return paramsMap.get(store.$key);\n      },\n    },\n    updateParams: {\n      value: function(params: UpdateHistoryParams) {\n        Object.assign(paramsMap.get(store.$key), params);\n        updateStore(store, {});\n      },\n    },\n    store: {\n      value: store,\n    },\n    push: {\n      value: function(params: UpdateHistoryParams) {\n        updateHistory('push', params);\n      },\n    },\n    pushIgnoreCloseHandle: {\n      value: function(params: UpdateHistoryParams) {\n        if (store.$hasCloseHandle) {\n          paramsMap.get(store.$key)?.close?.();\n          history.replace(params);\n        } else {\n          history.push(params);\n        }\n      },\n    },\n    replace: {\n      value: function(params: UpdateHistoryParams) {\n        updateHistory('replace', params);\n      },\n    },\n    pushState: {\n      value: function(data: any, title: string, path: string) {\n        updateHistoryByNative('push', data, title, path);\n      },\n    },\n    replaceState: {\n      value: function(data: any, title: string, path: string) {\n        updateHistoryByNative('replace', data, title, path);\n      },\n    },\n  });\n\n  if (!history.state) {\n    // 初始化 historyItem\n    const { pathname, search, hash } = location;\n    history.replace({ path: pathname, query: search, hash });\n  } else if (history.state.$hasCloseHandle) {\n    updateStore(store, history.state);\n    // 有 handle 返回键的页面刷新需要清除返回 handler\n    history.back();\n  } else {\n    // 有 gem 历史的正常普通刷新, 储存 params\n    const params = initParams({ title: document.title });\n    updateStore(store, {\n      $key: getKey(),\n      ...(history.state || {}),\n    });\n    paramsMap.set(store.$key, params);\n  }\n\n  /**\n   * 表示 popstate handler 中正在进行导航\n   */\n  let navigating = false;\n  window.addEventListener('popstate', event => {\n    const newState = event.state as HistoryItem | null;\n    if (!newState?.$key) {\n      // 比如作为其他 app 的宿主 app\n      return;\n    }\n    if (navigating) {\n      navigating = false;\n      return;\n    }\n\n    // 处理 forward or back\n    // replace 不会触发\n\n    // 刷新后再导航需要从当前 state 中构建 params\n    // 理论上该条历史记录中不会出现事件处理器\n    if (!paramsMap.has(newState.$key)) {\n      const { pathname, search, hash } = location;\n      paramsMap.set(newState.$key, {\n        path: pathname,\n        query: new QueryString(search),\n        hash,\n        title: document.title, // 浏览器缓存的 title\n        data: newState,\n      });\n    }\n\n    // url 变化前 historyItem\n    const prevState = store;\n\n    if (newState.$key > prevState.$key && newState.$hasOpenHandle) {\n      // 返回键关闭的 modal 能前进键重新打开\n      // 刷新后不能工作：刷新后 historyItem 中只有 url\n      paramsMap.get(newState.$key)?.open?.();\n    } else if (prevState.$hasCloseHandle) {\n      const prevParams = paramsMap.get(prevState.$key);\n      const closeHandle = prevParams?.close;\n      const shouldCloseHandle = prevParams?.shouldClose;\n      const notAllowClose = shouldCloseHandle && !shouldCloseHandle();\n      if (notAllowClose) {\n        navigating = true;\n        history.forward(); // 将重新触发 popstate\n        return; // 历史记录栈位置没有变化，不需要后面的 updateStore\n      } else {\n        // handle 返回键\n        if (closeHandle) {\n          closeHandle();\n        } else if (newState.$hasCloseHandle) {\n          // 有 modal 的页面刷新会执行 back 触发 popstate\n          // 如果是二级 modal 页面刷新\n          // 则还需要进行一次 back\n          // !!! 不完美：三级 modal 页面刷新不支持返回到初始页面\n          navigating = true;\n          history.back();\n        }\n      }\n    }\n\n    updateStore(cleanObject(store), newState);\n  });\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment poisition.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceeding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceeding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        // If `value` isn't already a string, we explicitly convert it here in case\n        // it can't be implicitly converted - i.e. it's a symbol.\n        const valueAsString = typeof value === 'string' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.2');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { createMarker, directive, NodePart, removeNodes, reparentNodes } from '../lit-html.js';\n// Helper functions for manipulating parts\n// TODO(kschaaf): Refactor into Part API?\nconst createAndInsertPart = (containerPart, beforePart) => {\n    const container = containerPart.startNode.parentNode;\n    const beforeNode = beforePart === undefined ? containerPart.endNode :\n        beforePart.startNode;\n    const startNode = container.insertBefore(createMarker(), beforeNode);\n    container.insertBefore(createMarker(), beforeNode);\n    const newPart = new NodePart(containerPart.options);\n    newPart.insertAfterNode(startNode);\n    return newPart;\n};\nconst updatePart = (part, value) => {\n    part.setValue(value);\n    part.commit();\n    return part;\n};\nconst insertPartBefore = (containerPart, part, ref) => {\n    const container = containerPart.startNode.parentNode;\n    const beforeNode = ref ? ref.startNode : containerPart.endNode;\n    const endNode = part.endNode.nextSibling;\n    if (endNode !== beforeNode) {\n        reparentNodes(container, part.startNode, endNode, beforeNode);\n    }\n};\nconst removePart = (part) => {\n    removeNodes(part.startNode.parentNode, part.startNode, part.endNode.nextSibling);\n};\n// Helper for generating a map of array item to its index over a subset\n// of an array (used to lazily generate `newKeyToIndexMap` and\n// `oldKeyToIndexMap`)\nconst generateMap = (list, start, end) => {\n    const map = new Map();\n    for (let i = start; i <= end; i++) {\n        map.set(list[i], i);\n    }\n    return map;\n};\n// Stores previous ordered list of parts and map of key to index\nconst partListCache = new WeakMap();\nconst keyListCache = new WeakMap();\n/**\n * A directive that repeats a series of values (usually `TemplateResults`)\n * generated from an iterable, and updates those items efficiently when the\n * iterable changes based on user-provided `keys` associated with each item.\n *\n * Note that if a `keyFn` is provided, strict key-to-DOM mapping is maintained,\n * meaning previous DOM for a given key is moved into the new position if\n * needed, and DOM will never be reused with values for different keys (new DOM\n * will always be created for new keys). This is generally the most efficient\n * way to use `repeat` since it performs minimum unnecessary work for insertions\n * amd removals.\n *\n * IMPORTANT: If providing a `keyFn`, keys *must* be unique for all items in a\n * given call to `repeat`. The behavior when two or more items have the same key\n * is undefined.\n *\n * If no `keyFn` is provided, this directive will perform similar to mapping\n * items to values, and DOM will be reused against potentially different items.\n */\nexport const repeat = directive((items, keyFnOrTemplate, template) => {\n    let keyFn;\n    if (template === undefined) {\n        template = keyFnOrTemplate;\n    }\n    else if (keyFnOrTemplate !== undefined) {\n        keyFn = keyFnOrTemplate;\n    }\n    return (containerPart) => {\n        if (!(containerPart instanceof NodePart)) {\n            throw new Error('repeat can only be used in text bindings');\n        }\n        // Old part & key lists are retrieved from the last update\n        // (associated with the part for this instance of the directive)\n        const oldParts = partListCache.get(containerPart) || [];\n        const oldKeys = keyListCache.get(containerPart) || [];\n        // New part list will be built up as we go (either reused from\n        // old parts or created for new keys in this update). This is\n        // saved in the above cache at the end of the update.\n        const newParts = [];\n        // New value list is eagerly generated from items along with a\n        // parallel array indicating its key.\n        const newValues = [];\n        const newKeys = [];\n        let index = 0;\n        for (const item of items) {\n            newKeys[index] = keyFn ? keyFn(item, index) : index;\n            newValues[index] = template(item, index);\n            index++;\n        }\n        // Maps from key to index for current and previous update; these\n        // are generated lazily only when needed as a performance\n        // optimization, since they are only required for multiple\n        // non-contiguous changes in the list, which are less common.\n        let newKeyToIndexMap;\n        let oldKeyToIndexMap;\n        // Head and tail pointers to old parts and new values\n        let oldHead = 0;\n        let oldTail = oldParts.length - 1;\n        let newHead = 0;\n        let newTail = newValues.length - 1;\n        // Overview of O(n) reconciliation algorithm (general approach\n        // based on ideas found in ivi, vue, snabbdom, etc.):\n        //\n        // * We start with the list of old parts and new values (and\n        //   arrays of their respective keys), head/tail pointers into\n        //   each, and we build up the new list of parts by updating\n        //   (and when needed, moving) old parts or creating new ones.\n        //   The initial scenario might look like this (for brevity of\n        //   the diagrams, the numbers in the array reflect keys\n        //   associated with the old parts or new values, although keys\n        //   and parts/values are actually stored in parallel arrays\n        //   indexed using the same head/tail pointers):\n        //\n        //      oldHead v                 v oldTail\n        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n        //   newParts: [ ,  ,  ,  ,  ,  ,  ]\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6] <- reflects the user's new\n        //                                      item order\n        //      newHead ^                 ^ newTail\n        //\n        // * Iterate old & new lists from both sides, updating,\n        //   swapping, or removing parts at the head/tail locations\n        //   until neither head nor tail can move.\n        //\n        // * Example below: keys at head pointers match, so update old\n        //   part 0 in-place (no need to move it) and record part 0 in\n        //   the `newParts` list. The last thing we do is advance the\n        //   `oldHead` and `newHead` pointers (will be reflected in the\n        //   next diagram).\n        //\n        //      oldHead v                 v oldTail\n        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n        //   newParts: [0,  ,  ,  ,  ,  ,  ] <- heads matched: update 0\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n        //                                      & newHead\n        //      newHead ^                 ^ newTail\n        //\n        // * Example below: head pointers don't match, but tail\n        //   pointers do, so update part 6 in place (no need to move\n        //   it), and record part 6 in the `newParts` list. Last,\n        //   advance the `oldTail` and `oldHead` pointers.\n        //\n        //         oldHead v              v oldTail\n        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n        //   newParts: [0,  ,  ,  ,  ,  , 6] <- tails matched: update 6\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldTail\n        //                                      & newTail\n        //         newHead ^              ^ newTail\n        //\n        // * If neither head nor tail match; next check if one of the\n        //   old head/tail items was removed. We first need to generate\n        //   the reverse map of new keys to index (`newKeyToIndexMap`),\n        //   which is done once lazily as a performance optimization,\n        //   since we only hit this case if multiple non-contiguous\n        //   changes were made. Note that for contiguous removal\n        //   anywhere in the list, the head and tails would advance\n        //   from either end and pass each other before we get to this\n        //   case and removals would be handled in the final while loop\n        //   without needing to generate the map.\n        //\n        // * Example below: The key at `oldTail` was removed (no longer\n        //   in the `newKeyToIndexMap`), so remove that part from the\n        //   DOM and advance just the `oldTail` pointer.\n        //\n        //         oldHead v           v oldTail\n        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n        //   newParts: [0,  ,  ,  ,  ,  , 6] <- 5 not in new map: remove\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    5 and advance oldTail\n        //         newHead ^           ^ newTail\n        //\n        // * Once head and tail cannot move, any mismatches are due to\n        //   either new or moved items; if a new key is in the previous\n        //   \"old key to old index\" map, move the old part to the new\n        //   location, otherwise create and insert a new part. Note\n        //   that when moving an old part we null its position in the\n        //   oldParts array if it lies between the head and tail so we\n        //   know to skip it when the pointers get there.\n        //\n        // * Example below: neither head nor tail match, and neither\n        //   were removed; so find the `newHead` key in the\n        //   `oldKeyToIndexMap`, and move that old part's DOM into the\n        //   next head position (before `oldParts[oldHead]`). Last,\n        //   null the part in the `oldPart` array since it was\n        //   somewhere in the remaining oldParts still to be scanned\n        //   (between the head and tail pointers) so that we know to\n        //   skip that old part on future iterations.\n        //\n        //         oldHead v        v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2,  ,  ,  ,  , 6] <- stuck: update & move 2\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    into place and advance\n        //                                      newHead\n        //         newHead ^           ^ newTail\n        //\n        // * Note that for moves/insertions like the one above, a part\n        //   inserted at the head pointer is inserted before the\n        //   current `oldParts[oldHead]`, and a part inserted at the\n        //   tail pointer is inserted before `newParts[newTail+1]`. The\n        //   seeming asymmetry lies in the fact that new parts are\n        //   moved into place outside in, so to the right of the head\n        //   pointer are old parts, and to the right of the tail\n        //   pointer are new parts.\n        //\n        // * We always restart back from the top of the algorithm,\n        //   allowing matching and simple updates in place to\n        //   continue...\n        //\n        // * Example below: the head pointers once again match, so\n        //   simply update part 1 and record it in the `newParts`\n        //   array.  Last, advance both head pointers.\n        //\n        //         oldHead v        v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2, 1,  ,  ,  , 6] <- heads matched: update 1\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n        //                                      & newHead\n        //            newHead ^        ^ newTail\n        //\n        // * As mentioned above, items that were moved as a result of\n        //   being stuck (the final else clause in the code below) are\n        //   marked with null, so we always advance old pointers over\n        //   these so we're comparing the next actual old value on\n        //   either end.\n        //\n        // * Example below: `oldHead` is null (already placed in\n        //   newParts), so advance `oldHead`.\n        //\n        //            oldHead v     v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6] <- old head already used:\n        //   newParts: [0, 2, 1,  ,  ,  , 6]    advance oldHead\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n        //               newHead ^     ^ newTail\n        //\n        // * Note it's not critical to mark old parts as null when they\n        //   are moved from head to tail or tail to head, since they\n        //   will be outside the pointer range and never visited again.\n        //\n        // * Example below: Here the old tail key matches the new head\n        //   key, so the part at the `oldTail` position and move its\n        //   DOM to the new head position (before `oldParts[oldHead]`).\n        //   Last, advance `oldTail` and `newHead` pointers.\n        //\n        //               oldHead v  v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2, 1, 4,  ,  , 6] <- old tail matches new\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]   head: update & move 4,\n        //                                     advance oldTail & newHead\n        //               newHead ^     ^ newTail\n        //\n        // * Example below: Old and new head keys match, so update the\n        //   old head part in place, and advance the `oldHead` and\n        //   `newHead` pointers.\n        //\n        //               oldHead v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2, 1, 4, 3,   ,6] <- heads match: update 3\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance oldHead &\n        //                                      newHead\n        //                  newHead ^  ^ newTail\n        //\n        // * Once the new or old pointers move past each other then all\n        //   we have left is additions (if old list exhausted) or\n        //   removals (if new list exhausted). Those are handled in the\n        //   final while loops at the end.\n        //\n        // * Example below: `oldHead` exceeded `oldTail`, so we're done\n        //   with the main loop.  Create the remaining part and insert\n        //   it at the new head position, and the update is complete.\n        //\n        //                   (oldHead > oldTail)\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2, 1, 4, 3, 7 ,6] <- create and insert 7\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n        //                     newHead ^ newTail\n        //\n        // * Note that the order of the if/else clauses is not\n        //   important to the algorithm, as long as the null checks\n        //   come first (to ensure we're always working on valid old\n        //   parts) and that the final else clause comes last (since\n        //   that's where the expensive moves occur). The order of\n        //   remaining clauses is is just a simple guess at which cases\n        //   will be most common.\n        //\n        // * TODO(kschaaf) Note, we could calculate the longest\n        //   increasing subsequence (LIS) of old items in new position,\n        //   and only move those not in the LIS set. However that costs\n        //   O(nlogn) time and adds a bit more code, and only helps\n        //   make rare types of mutations require fewer moves. The\n        //   above handles removes, adds, reversal, swaps, and single\n        //   moves of contiguous items in linear time, in the minimum\n        //   number of moves. As the number of multiple moves where LIS\n        //   might help approaches a random shuffle, the LIS\n        //   optimization becomes less helpful, so it seems not worth\n        //   the code at this point. Could reconsider if a compelling\n        //   case arises.\n        while (oldHead <= oldTail && newHead <= newTail) {\n            if (oldParts[oldHead] === null) {\n                // `null` means old part at head has already been used\n                // below; skip\n                oldHead++;\n            }\n            else if (oldParts[oldTail] === null) {\n                // `null` means old part at tail has already been used\n                // below; skip\n                oldTail--;\n            }\n            else if (oldKeys[oldHead] === newKeys[newHead]) {\n                // Old head matches new head; update in place\n                newParts[newHead] =\n                    updatePart(oldParts[oldHead], newValues[newHead]);\n                oldHead++;\n                newHead++;\n            }\n            else if (oldKeys[oldTail] === newKeys[newTail]) {\n                // Old tail matches new tail; update in place\n                newParts[newTail] =\n                    updatePart(oldParts[oldTail], newValues[newTail]);\n                oldTail--;\n                newTail--;\n            }\n            else if (oldKeys[oldHead] === newKeys[newTail]) {\n                // Old head matches new tail; update and move to new tail\n                newParts[newTail] =\n                    updatePart(oldParts[oldHead], newValues[newTail]);\n                insertPartBefore(containerPart, oldParts[oldHead], newParts[newTail + 1]);\n                oldHead++;\n                newTail--;\n            }\n            else if (oldKeys[oldTail] === newKeys[newHead]) {\n                // Old tail matches new head; update and move to new head\n                newParts[newHead] =\n                    updatePart(oldParts[oldTail], newValues[newHead]);\n                insertPartBefore(containerPart, oldParts[oldTail], oldParts[oldHead]);\n                oldTail--;\n                newHead++;\n            }\n            else {\n                if (newKeyToIndexMap === undefined) {\n                    // Lazily generate key-to-index maps, used for removals &\n                    // moves below\n                    newKeyToIndexMap = generateMap(newKeys, newHead, newTail);\n                    oldKeyToIndexMap = generateMap(oldKeys, oldHead, oldTail);\n                }\n                if (!newKeyToIndexMap.has(oldKeys[oldHead])) {\n                    // Old head is no longer in new list; remove\n                    removePart(oldParts[oldHead]);\n                    oldHead++;\n                }\n                else if (!newKeyToIndexMap.has(oldKeys[oldTail])) {\n                    // Old tail is no longer in new list; remove\n                    removePart(oldParts[oldTail]);\n                    oldTail--;\n                }\n                else {\n                    // Any mismatches at this point are due to additions or\n                    // moves; see if we have an old part we can reuse and move\n                    // into place\n                    const oldIndex = oldKeyToIndexMap.get(newKeys[newHead]);\n                    const oldPart = oldIndex !== undefined ? oldParts[oldIndex] : null;\n                    if (oldPart === null) {\n                        // No old part for this value; create a new one and\n                        // insert it\n                        const newPart = createAndInsertPart(containerPart, oldParts[oldHead]);\n                        updatePart(newPart, newValues[newHead]);\n                        newParts[newHead] = newPart;\n                    }\n                    else {\n                        // Reuse old part\n                        newParts[newHead] =\n                            updatePart(oldPart, newValues[newHead]);\n                        insertPartBefore(containerPart, oldPart, oldParts[oldHead]);\n                        // This marks the old part as having been used, so that\n                        // it will be skipped in the first two checks above\n                        oldParts[oldIndex] = null;\n                    }\n                    newHead++;\n                }\n            }\n        }\n        // Add parts for any remaining new values\n        while (newHead <= newTail) {\n            // For all remaining additions, we insert before last new\n            // tail, since old pointers are no longer valid\n            const newPart = createAndInsertPart(containerPart, newParts[newTail + 1]);\n            updatePart(newPart, newValues[newHead]);\n            newParts[newHead++] = newPart;\n        }\n        // Remove any remaining unused old parts\n        while (oldHead <= oldTail) {\n            const oldPart = oldParts[oldHead++];\n            if (oldPart !== null) {\n                removePart(oldPart);\n            }\n        }\n        // Save order of new parts for next round\n        partListCache.set(containerPart, newParts);\n        keyListCache.set(containerPart, newKeys);\n    };\n});\n//# sourceMappingURL=repeat.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { directive } from '../lit-html.js';\nconst previousValues = new WeakMap();\n/**\n * Prevents re-render of a template function until a single value or an array of\n * values changes.\n *\n * Example:\n *\n * ```js\n * html`\n *   <div>\n *     ${guard([user.id, company.id], () => html`...`)}\n *   </div>\n * ```\n *\n * In this case, the template only renders if either `user.id` or `company.id`\n * changes.\n *\n * guard() is useful with immutable data patterns, by preventing expensive work\n * until data updates.\n *\n * Example:\n *\n * ```js\n * html`\n *   <div>\n *     ${guard([immutableItems], () => immutableItems.map(i => html`${i}`))}\n *   </div>\n * ```\n *\n * In this case, items are mapped over only when the array reference changes.\n *\n * @param value the value to check before re-rendering\n * @param f the template function\n */\nexport const guard = directive((value, f) => (part) => {\n    const previousValue = previousValues.get(part);\n    if (Array.isArray(value)) {\n        // Dirty-check arrays by item\n        if (Array.isArray(previousValue) &&\n            previousValue.length === value.length &&\n            value.every((v, i) => v === previousValue[i])) {\n            return;\n        }\n    }\n    else if (previousValue === value &&\n        (value !== undefined || previousValues.has(part))) {\n        // Dirty-check non-arrays by identity\n        return;\n    }\n    part.setValue(f());\n    // Copy the value if it's an array so that if it's mutated we don't forget\n    // what the previous values were.\n    previousValues.set(part, Array.isArray(value) ? Array.from(value) : value);\n});\n//# sourceMappingURL=guard.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, directive } from '../lit-html.js';\n/**\n * For AttributeParts, sets the attribute if the value is defined and removes\n * the attribute if the value is undefined.\n *\n * For other part types, this directive is a no-op.\n */\nexport const ifDefined = directive((value) => (part) => {\n    if (value === undefined && part instanceof AttributePart) {\n        if (value !== part.value) {\n            const name = part.committer.name;\n            part.committer.element.removeAttribute(name);\n        }\n    }\n    else {\n        part.setValue(value);\n    }\n});\n//# sourceMappingURL=if-defined.js.map","/* eslint-disable @typescript-eslint/no-empty-function */\n\nimport * as lit from 'lit-html';\nimport { TemplateResult } from 'lit-html';\nimport { connect, disconnect, HANDLES_KEY, Store } from './store';\nimport { Pool, addMicrotask, Sheet, kebabToCamelCase, emptyFunction } from './utils';\n\nimport { repeat as litRepeat } from 'lit-html/directives/repeat';\nimport { guard as litGuard } from 'lit-html/directives/guard';\nimport { ifDefined as litIfDefined } from 'lit-html/directives/if-defined';\n\nlet litHtml = {\n  html: lit.html,\n  svg: lit.svg,\n  render: lit.render,\n  directive: lit.directive,\n  repeat: litRepeat,\n  guard: litGuard,\n  ifDefined: litIfDefined,\n};\n\ndeclare global {\n  interface Window {\n    __litHtml: typeof litHtml;\n  }\n}\n\nif (window.__litHtml) {\n  // 自定义元素不能重复定义\n  // 所以嵌套 gem app 中导出的自定义元素类可能是之前定义的类\n  // 可能造成使用的 html 对象不是同一个\n  // map, 缓存之类的会变得不同\n  // 所以需要把他们放在全局对象中\n  litHtml = window.__litHtml;\n} else {\n  window.__litHtml = litHtml;\n}\n\nconst { html, svg, render, directive, repeat, guard, ifDefined } = litHtml;\nexport { html, svg, render, directive, repeat, guard, ifDefined, TemplateResult };\n\ndeclare global {\n  interface ElementInternals {\n    // 不一定支持\n    states?: DOMTokenList;\n  }\n  interface HTMLElement {\n    attachInternals: () => ElementInternals;\n  }\n}\n\ntype UnmountCallback = () => void;\n\n// final 字段如果使用 symbol 或者 private 将导致 modal-base 生成匿名子类 declaration 失败\n/**\n * @attr ref\n */\nexport abstract class BaseElement<T = {}> extends HTMLElement {\n  // 这里只是字段申明，不能赋值，否则子类会继承被共享该字段\n  static observedAttributes: string[]; // WebAPI 中是实时检查这个列表\n  static observedPropertys: string[];\n  static observedStores: Store<unknown>[];\n  static adoptedStyleSheets: (CSSStyleSheet | Sheet<unknown>)[];\n  static defineEvents: string[];\n\n  readonly state: T;\n  readonly ref: string;\n\n  /**@final */\n  __renderRoot: HTMLElement | ShadowRoot;\n  /**@final */\n  __internals: ElementInternals | undefined;\n  /**@final */\n  __isMounted: boolean;\n\n  __unmountCallback: UnmountCallback | undefined;\n\n  constructor(shadow = true) {\n    super();\n    this.setState = this.setState.bind(this);\n    this.willMount = this.willMount.bind(this);\n    this.render = this.render.bind(this);\n    this.mounted = this.mounted.bind(this);\n    this.shouldUpdate = this.shouldUpdate.bind(this);\n    this.__update = this.__update.bind(this);\n    this.updated = this.updated.bind(this);\n    this.attributeChanged = this.attributeChanged.bind(this);\n    this.propertyChanged = this.propertyChanged.bind(this);\n    this.unmounted = this.unmounted.bind(this);\n\n    this.__renderRoot = shadow ? this.attachShadow({ mode: 'open' }) : this;\n    const { observedAttributes, observedPropertys, defineEvents, observedStores, adoptedStyleSheets } = new.target;\n    if (observedAttributes) {\n      observedAttributes.forEach(attr => {\n        const prop = kebabToCamelCase(attr);\n        // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n        // @ts-ignore\n        if (typeof this[prop] === 'function') {\n          throw `Don't use attribute with the same name as native methods`;\n        }\n        // Native attribute，no need difine property\n        // e.g: `id`, `title`, `hidden`, `alt`, `lang`\n        // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n        // @ts-ignore\n        if (this[prop] !== undefined) return;\n        // !!! Custom property shortcut access only supports `string` type\n        Object.defineProperty(this, prop, {\n          configurable: true,\n          get() {\n            // Return empty string if attribute does not exist\n            return this.getAttribute(attr) || '';\n          },\n          set(v: string) {\n            if (v === null) {\n              this.removeAttribute(attr);\n            } else {\n              this.setAttribute(attr, v);\n            }\n          },\n        });\n      });\n    }\n    if (observedPropertys) {\n      observedPropertys.forEach(prop => {\n        this.__connectProperty(prop, false);\n      });\n    }\n    if (defineEvents) {\n      defineEvents.forEach(event => {\n        this.__connectProperty(event, true);\n        // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n        // @ts-ignore\n        this[event] = emptyFunction;\n      });\n    }\n    if (observedStores) {\n      observedStores.forEach(store => {\n        if (!store[HANDLES_KEY]) {\n          throw new Error('`observedStores` only support store module');\n        }\n\n        connect(store, this.__update);\n      });\n    }\n    if (adoptedStyleSheets) {\n      if (this.shadowRoot) {\n        this.shadowRoot.adoptedStyleSheets = adoptedStyleSheets;\n      } else {\n        document.adoptedStyleSheets = document.adoptedStyleSheets.concat(adoptedStyleSheets);\n      }\n    }\n  }\n\n  /**@final */\n  get internals() {\n    if (!this.__internals) {\n      this.__internals = this.attachInternals();\n    }\n    return this.__internals;\n  }\n\n  /**\n   * @final\n   * 和 `attr` 不一样，只有等 `lit-html` 在已经初始化的元素上设置 `prop` 后才能访问\n   * 所以能在类字段中直接访问 `attr` 而不能访问 `prop`\n   * @example\n   * class TempGem extends GemElement {\n   *   static observedPropertys = ['prop'];\n   *   test = expect(this.prop).to.equal(undefined);\n   * }\n   * // <temp-gem .prop=${{a: 1}}></temp-gem>\n   * */\n  __connectProperty(prop: string, isEventHandle = false) {\n    if (prop in this) return;\n    // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n    let propValue: any = this[prop];\n    Object.defineProperty(this, prop, {\n      configurable: true,\n      get() {\n        return propValue;\n      },\n      set(v) {\n        if (v !== propValue) {\n          if (isEventHandle) {\n            if (v.isEventHandle) throw `Don't assign a wrapped event handler`;\n            propValue = (detail: any) => {\n              const evt = new CustomEvent(prop.toLowerCase(), { detail });\n              this.dispatchEvent(evt);\n              v(evt);\n            };\n            propValue.isEventHandle = true;\n          } else {\n            propValue = v;\n          }\n          if (this.__isMounted) {\n            this.propertyChanged(prop, propValue, v);\n            addMicrotask(this.__update);\n          }\n        }\n      },\n    });\n  }\n\n  /**@final */\n  setState(payload: Partial<T>) {\n    if (!this.state) throw new Error('`state` not initialized');\n    Object.assign(this.state, payload);\n    addMicrotask(this.__update);\n  }\n\n  /**@lifecycle */\n  willMount(): any {}\n\n  /**@lifecycle */\n  render(): TemplateResult | null {\n    return html`\n      <slot></slot>\n    `;\n  }\n\n  /**@lifecycle */\n  mounted(): any {}\n\n  /**@lifecycle */\n  shouldUpdate() {\n    return true;\n  }\n\n  /**@final */\n  __update() {\n    if (this.__isMounted && this.shouldUpdate()) {\n      render(this.render(), this.__renderRoot);\n      this.updated();\n    }\n  }\n\n  /**@helper */\n  update() {\n    this.__update();\n  }\n\n  /**@lifecycle */\n  updated(): any {}\n\n  // 同步触发\n  /**@lifecycle */\n  propertyChanged(_name: string, _oldValue: any, _newValue: any): any {}\n  // 同步触发\n  /**@lifecycle */\n  attributeChanged(_name: string, _oldValue: string, _newValue: string): any {}\n\n  /**@lifecycle */\n  unmounted(): any {}\n\n  /**@private */\n  /**@final */\n  attributeChangedCallback(name: string, oldValue: string, newValue: string) {\n    if (this.__isMounted) {\n      this.attributeChanged(name, oldValue, newValue);\n      addMicrotask(this.__update);\n    }\n  }\n\n  /**@final */\n  __connectedCallback() {\n    render(this.render(), this.__renderRoot);\n    const callback = this.mounted();\n    if (typeof callback === 'function') this.__unmountCallback = callback;\n    this.__isMounted = true;\n  }\n\n  /**@private */\n  /**@final */\n  // adoptedCallback() {}\n\n  /**@private */\n  /**@final */\n  disconnectedCallback() {\n    const constructor = this.constructor as typeof BaseElement;\n    if (constructor.observedStores) {\n      constructor.observedStores.forEach(store => {\n        disconnect(store, this.__update);\n      });\n    }\n    this.__unmountCallback?.();\n    this.unmounted();\n    this.__isMounted = false;\n  }\n}\n\nexport abstract class GemElement<T = {}> extends BaseElement<T> {\n  /**@private */\n  /**@final */\n  connectedCallback() {\n    this.willMount();\n    this.__connectedCallback();\n  }\n}\n\n// global render task pool\nconst renderTaskPool = new Pool<Function>();\nlet loop = false;\nconst tick = () => {\n  window.requestAnimationFrame(function callback(timestamp) {\n    const task = renderTaskPool.get();\n    if (task) {\n      task();\n      if (performance.now() - timestamp < 16) {\n        callback(timestamp);\n        return;\n      }\n    }\n    // `renderTaskPool` not empty\n    if (loop) {\n      tick();\n    }\n  });\n};\nrenderTaskPool.addEventListener('start', () => {\n  loop = true;\n  tick();\n});\nrenderTaskPool.addEventListener('end', () => (loop = false));\n\nexport abstract class AsyncGemElement<T = {}> extends BaseElement<T> {\n  /**@final */\n  __update() {\n    renderTaskPool.add(() => {\n      if (this.shouldUpdate()) {\n        render(this.render(), this.__renderRoot);\n        this.updated();\n      }\n    });\n  }\n\n  /**@private */\n  /**@final */\n  connectedCallback() {\n    this.willMount();\n    renderTaskPool.add(() => {\n      this.__connectedCallback();\n    });\n  }\n}\n\n// 重写了全局 customElements\n// 原因是方便多个独立 app 同时使用 gem\n// 用户使用和 gem 同名的元素不会生效也不会报错\nconst define = customElements.define.bind(customElements);\ncustomElements.define = function(\n  tagName: string,\n  Class: typeof GemElement | typeof AsyncGemElement,\n  options?: ElementDefinitionOptions,\n) {\n  if (!customElements.get(tagName)) {\n    define(tagName, Class, options);\n  }\n};\n","import { raw, GemElement, AsyncGemElement, createStore, updateStore, html } from '../../';\n\nconst store = createStore({\n  number: 1,\n});\n\nsetInterval(() => {\n  updateStore(store, { number: (store.number % 10) + 1 });\n}, 1000);\n\ncustomElements.define(\n  'fiber-dot',\n  class extends AsyncGemElement {\n    static observedStores = [store];\n\n    onmouseenter = () => {\n      this.setState({ hover: true });\n    };\n    onmouseleave = () => {\n      this.setState({ hover: false });\n    };\n\n    size: number;\n    x: number;\n    y: number;\n\n    state = { hover: false };\n\n    render() {\n      const s = this.size * 1.3;\n      Object.assign(this.style, {\n        width: s + 'px',\n        height: s + 'px',\n        left: this.x + 'px',\n        top: this.y + 'px',\n        borderRadius: s / 2 + 'px',\n        lineHeight: s + 'px',\n        background: this.state.hover ? '#ff0' : '#61dafb',\n      });\n      return html`\n        <style>\n          :host {\n            position: absolute;\n            font: normal 15px sans-serif;\n            text-align: center;\n            cursor: pointer;\n            display: block;\n          }\n        </style>\n        ${this.state.hover ? '**' + store.number + '**' : store.number}\n      `;\n    }\n  },\n);\n\nconst targetSize = 25;\ncustomElements.define(\n  'fiber-triangle',\n  class extends GemElement {\n    x: number;\n    y: number;\n    s: number;\n    seconds: number;\n\n    render() {\n      let s = this.s;\n      if (s <= targetSize) {\n        return html`\n          <fiber-dot .x=${this.x - targetSize / 2} .y=${this.y - targetSize / 2} .size=${targetSize}></fiber-dot>\n        `;\n      }\n      s = s / 2;\n\n      const slowDown = true;\n      if (slowDown) {\n        const e = performance.now() + 0.8;\n        while (performance.now() < e) {\n          // Artificially long execution time.\n        }\n      }\n      return html`\n        <fiber-triangle .x=${this.x} .y=${this.y - s / 2} .s=${s}></fiber-triangle>\n        <fiber-triangle .x=${this.x - s} .y=${this.y + s / 2} .s=${s}></fiber-triangle>\n        <fiber-triangle .x=${this.x + s} .y=${this.y + s / 2} .s=${s}></fiber-triangle>\n      `;\n    }\n  },\n);\n\nclass App extends GemElement {\n  static observedPropertys = ['elapsed'];\n  elapsed = 0;\n  render() {\n    const elapsed = this.elapsed;\n    const t = (elapsed / 1000) % 10;\n    const scale = 1 + (t > 5 ? 10 - t : t) / 10;\n    this.style.transform = 'scaleX(' + scale / 2.1 + ') scaleY(0.7) translateZ(0.1px)';\n    return html`\n      <style>\n        :host {\n          position: absolute;\n          transform-origin: 0 0;\n          left: 50%;\n          top: 50%;\n          width: 10px;\n          height: 10px;\n          background: #eee;\n        }\n      </style>\n      <div>\n        <fiber-triangle .x=${0} .y=${0} .s=${1000}></fiber-triangle>\n      </div>\n    `;\n  }\n}\ncustomElements.define('app-root', App);\n\ndocument.body.innerHTML = raw`\n  <ul>\n    <li><a href=\"https://stencil-fiber-demo.firebaseapp.com/perf.html\">stencil-fiber-demo</a></li>\n    <li><a href=\"https://claudiopro.github.io/react-fiber-vs-stack-demo/fiber.html\">react-fiber-demo</a></li>\n  </ul>\n`;\n\nconst app = new App();\ndocument.body.append(app);\n\nconst start = Date.now();\nfunction update() {\n  app.elapsed = Date.now() - start;\n  requestAnimationFrame(update);\n}\nrequestAnimationFrame(update);\n"],"sourceRoot":""}