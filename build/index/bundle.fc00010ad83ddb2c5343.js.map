{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/lib/utils.ts","webpack:///./src/lib/store.ts","webpack:///./src/lib/history.ts","webpack:///./node_modules/lit-html/lib/directive.js","webpack:///./node_modules/lit-html/lib/dom.js","webpack:///./node_modules/lit-html/lib/part.js","webpack:///./node_modules/lit-html/lib/template.js","webpack:///./node_modules/lit-html/lib/template-instance.js","webpack:///./node_modules/lit-html/lib/template-result.js","webpack:///./node_modules/lit-html/lib/parts.js","webpack:///./node_modules/lit-html/lib/default-template-processor.js","webpack:///./node_modules/lit-html/lib/template-factory.js","webpack:///./node_modules/lit-html/lib/render.js","webpack:///./node_modules/lit-html/lit-html.js","webpack:///./node_modules/lit-html/directives/repeat.js","webpack:///./node_modules/lit-html/directives/guard.js","webpack:///./node_modules/lit-html/directives/if-defined.js","webpack:///./src/lib/element.ts","webpack:///./src/examples/index/index.ts","webpack:///./src/lib/decorators.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","updaterSet","Set","addMicrotask","func","size","window","queueMicrotask","forEach","clear","delete","add","Pool","EventTarget","currentId","count","pool","Map","item","this","dispatchEvent","CustomEvent","set","StorageType","Storage","cache","type","getItem","result","JSON","parse","e","removeItem","LOCALSTORAGE","SESSIONSTORAGE","setItem","stringify","QueryString","URLSearchParams","param","super","keys","append","query","fromEntries","entries","string","toString","WeakMap","camelToKebabCase","str","replace","$1","toLowerCase","kebabToCamelCase","_substr","toUpperCase","deleteSubArr","originArr","arr","HANDLES_KEY","createStore","originStore","store","writable","updateStore","assign","disconnect","historyState","list","currentIndex","openHandleMap","colseHandleMap","shouldCloseHandleMap","generateState","data","open","close","shouldClose","$key","Error","$open","$close","$shouldClose","state","Date","now","performance","basePath","v","path","location","pathname","RegExp","hash","title","history","forward","back","options","pushState","newList","slice","concat","length","closeHandle","push","replaceState","splice","__gemHistory","search","storage","sessionStorageKey","getSession","addEventListener","setSession","navigating","event","prevState","newStateIndex","findIndex","newState","openHandle","shouldCloseHandle","directives","f","args","isDirective","has","isCEPolyfill","undefined","customElements","polyfillWrapFlushCallback","reparentNodes","container","start","end","before","nextSibling","insertBefore","removeNodes","removeChild","noChange","nothing","marker","String","Math","random","nodeMarker","markerRegex","boundAttributeSuffix","Template","element","parts","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","index","partIndex","strings","values","node","nextNode","nodeType","hasAttributes","attributes","endsWith","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","attributeValue","getAttribute","removeAttribute","statics","split","tagName","currentNode","indexOf","parent","parentNode","lastIndex","insert","createMarker","match","createTextNode","previousSibling","pop","suffix","isTemplatePartActive","part","createComment","template","processor","__parts","setValue","commit","fragment","cloneNode","importNode","nodeIndex","nodeName","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","commentMarker","html","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","createElement","innerHTML","getHTML","getTemplateElement","svgElement","firstChild","isPrimitive","isIterable","Array","isArray","iterator","AttributeCommitter","dirty","_createPart","text","setAttribute","_getValue","committer","directive","__pendingValue","startNode","appendChild","endNode","ref","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","valueAsString","templateFactory","update","instance","_clone","itemParts","itemPart","appendIntoPart","insertAfterPart","PropertyCommitter","single","PropertyPart","eventOptionsSupported","removeEventListener","_e","eventName","eventContext","__boundHandleEvent","handleEvent","newListener","oldListener","shouldRemoveListener","capture","once","passive","shouldAddListener","__options","getOptions","defaultTemplateProcessor","prefix","templateCache","templateCaches","stringsArray","keyString","join","createAndInsertPart","containerPart","beforePart","beforeNode","newPart","updatePart","insertPartBefore","removePart","generateMap","map","partListCache","keyListCache","repeat","items","keyFnOrTemplate","keyFn","oldParts","oldKeys","newParts","newValues","newKeys","newKeyToIndexMap","oldKeyToIndexMap","oldHead","oldTail","newHead","newTail","oldIndex","oldPart","previousValues","guard","previousValue","every","from","ifDefined","litHtml","svg","render","appendInto","__litHtml","HTMLElement","shadow","setState","willMount","mounted","shouldUpdate","__update","updated","__connectAttribute","__disconnectAttribute","__connectProperty","__disconnectProperty","__connectStore","__disconnectStore","attributeChanged","propertyChanged","unmounted","__renderRoot","attachShadow","observedAttributes","observedPropertys","observedStores","adoptedStyleSheets","attr","prop","shadowRoot","payload","__isMounted","isAttr","con","constructor","configurable","propValue","connect","_name","_oldValue","_newValue","oldValue","newValue","GemElement","renderTaskPool","loop","tick","requestAnimationFrame","callback","timestamp","task","define","Class","getGitPageUrl","examples","URL","href","cls","body"],"mappings":"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","file":"bundle.fc00010ad83ddb2c5343.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","const updaterSet = new Set<Function>();\nexport function addMicrotask(func: Function) {\n  if (!updaterSet.size) {\n    // delayed execution callback after updating store\n    window.queueMicrotask(() => {\n      updaterSet.forEach(func => func());\n      updaterSet.clear();\n    });\n  }\n  updaterSet.delete(func);\n  updaterSet.add(func);\n}\n\ninterface PoolEventMap {\n  start: Event;\n  end: Event;\n}\nexport class Pool<T> extends EventTarget {\n  addEventListener: <K extends keyof PoolEventMap>(\n    type: K,\n    listener: (this: Pool<T>, ev: PoolEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions,\n  ) => void;\n\n  currentId = 0;\n  count = 0;\n  pool = new Map<number, T>();\n\n  add(item: T) {\n    if (!this.pool.size) this.dispatchEvent(new CustomEvent('start'));\n    this.pool.set(this.count, item);\n    this.count += 1;\n  }\n\n  get(): T {\n    const item = this.pool.get(this.currentId);\n    if (item) {\n      this.pool.delete(this.currentId);\n      this.currentId += 1;\n      if (!this.pool.size) this.dispatchEvent(new CustomEvent('end'));\n    }\n    return item;\n  }\n}\n\nenum StorageType {\n  LOCALSTORAGE = 'localStorage',\n  SESSIONSTORAGE = 'sessionStorage',\n}\nexport class Storage<T> {\n  cache = {};\n  get(key: string, type: StorageType): T {\n    if (!this.cache[type]) this.cache[type] = {};\n    if (key in this.cache[type]) return this.cache[type][key];\n\n    const value = window[type].getItem(key);\n\n    if (!value) return undefined;\n    try {\n      const result: T = JSON.parse(value);\n      this.cache[type][key] = result;\n      return result;\n    } catch (e) {\n      window[type].removeItem(key);\n    }\n  }\n  getLocal(key: string): T {\n    return this.get(key, StorageType.LOCALSTORAGE);\n  }\n  getSession(key: string): T {\n    return this.get(key, StorageType.SESSIONSTORAGE);\n  }\n  set(key: string, value: T, type: StorageType) {\n    if (!this.cache[type]) this.cache[type] = {};\n    this.cache[type][key] = value;\n    return window[type].setItem(key, JSON.stringify(value));\n  }\n  setLocal(key: string, value: T) {\n    return this.set(key, value, StorageType.LOCALSTORAGE);\n  }\n  setSession(key: string, value: T) {\n    return this.set(key, value, StorageType.SESSIONSTORAGE);\n  }\n}\n\ndeclare global {\n  interface URLSearchParams {\n    entries(): Iterable<readonly [string | number | symbol, any]>;\n  }\n}\nexport class QueryString extends URLSearchParams {\n  constructor(param: any) {\n    if (param instanceof QueryString) {\n      return param;\n    } else if (typeof param === 'string') {\n      super(param);\n    } else if (param) {\n      super();\n      Object.keys(param).forEach(key => {\n        this.append(key, param[key]);\n      });\n    } else {\n      super();\n    }\n  }\n\n  concat(param: any) {\n    let query: any;\n    if (typeof param === 'string') {\n      query = Object.fromEntries(new URLSearchParams(param).entries());\n    } else {\n      query = param;\n    }\n    Object.keys(query).forEach(key => {\n      this.append(key, query[key]);\n    });\n  }\n\n  toString() {\n    const string = super.toString();\n    return string ? `?${string}` : '';\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\n// 写 html 文本\nexport function raw(arr: TemplateStringsArray, ...args: any[]) {\n  return arr.reduce((prev, current, index) => prev + (args[index - 1] || '') + current);\n}\n\n// 写 css 文本，在 CSSStyleSheet 中使用\nexport function css(arr: TemplateStringsArray, ...args: any[]) {\n  return raw(arr, ...args);\n}\n\nexport type Sheet<T> = {\n  [P in keyof T]: P;\n};\n\ndeclare global {\n  interface CSSStyleSheet {\n    replaceSync: (str: string) => void;\n  }\n\n  interface CSSRuleList {\n    item(index: number): CSSStyleRule;\n  }\n  interface ShadowRoot {\n    adoptedStyleSheets: Sheet<unknown>[];\n  }\n  interface Document {\n    adoptedStyleSheets: Sheet<unknown>[];\n  }\n}\n\nconst rulesWeakMap = new WeakMap<Sheet<unknown>, any>();\n// rules 引用的是字符串，所以不能动态更新\nexport function createCSSSheet<T>(rules: T | string, mediaQuery = ''): T extends string ? CSSStyleSheet : Sheet<T> {\n  let cssSheet = rulesWeakMap.get(rules);\n  if (!cssSheet) {\n    const sheet = new CSSStyleSheet();\n    sheet.media.mediaText = mediaQuery;\n    let style = '';\n    if (typeof rules === 'string') {\n      style = rules;\n    } else {\n      Object.keys(rules).forEach(key => {\n        sheet[key] = rules[key].type === 'tag' ? key : `${key}-${rules[key].key}`;\n        style += rules[key].str.replace(/&/g, sheet[key]);\n      });\n      rulesWeakMap.set(rules, sheet);\n    }\n    sheet.replaceSync(style);\n    cssSheet = sheet;\n  }\n  return cssSheet;\n}\n\nfunction randomStr(number = 5, origin = '0123456789abcdefghijklmnopqrstuvwxyz') {\n  const len = origin.length;\n  let str = '';\n  for (let i = 0; i < number; i++) {\n    str += origin[Math.floor(Math.random() * len)];\n  }\n  return str;\n}\n\n// 只支持一层嵌套\n// https://drafts.csswg.org/css-nesting-1/\nfunction flatStyled(style: string, type: 'id' | 'class' | 'tag') {\n  const subStyle = [];\n  let str =\n    `& {${style.replace(new RegExp('&.*{(.*)}', 'gs'), function(substr) {\n      subStyle.push(substr);\n      return '';\n    })}}` + subStyle.join('');\n  if (type !== 'tag') str = str.replace(/&/g, type === 'class' ? '.&' : '#&');\n  return { str, key: randomStr(), type };\n}\n\n// 写 css 文本，在 CSSStyleSheet 中使用，使用 styed-components 高亮\n//\n// createCSSSheet({\n//   red: styled.class`\n//     background: red;\n//     &:hover {\n//       background: blue;\n//     }\n//   `,\n// });\n\nexport const styled = {\n  class: (arr: TemplateStringsArray, ...args: any[]) => {\n    const style = raw(arr, ...args);\n    return flatStyled(style, 'class');\n  },\n  id: (arr: TemplateStringsArray, ...args: any[]) => {\n    const style = raw(arr, ...args);\n    return flatStyled(style, 'id');\n  },\n  tag: (arr: TemplateStringsArray, ...args: any[]) => {\n    const style = raw(arr, ...args);\n    return flatStyled(style, 'tag');\n  },\n};\n\nexport function camelToKebabCase(str: string) {\n  return str.replace(/[A-Z]/g, ($1: string) => '-' + $1.toLowerCase());\n}\n\nexport function kebabToCamelCase(str: string) {\n  return str.replace(/-(.)/g, (_substr, $1: string) => $1.toUpperCase());\n}\n\nexport function deleteSubArr<T>(originArr: T[], arr: T[]) {\n  const set = new Set(originArr);\n  arr.forEach(item => {\n    set.delete(item);\n  });\n  return [...set];\n}\n","import { addMicrotask } from './utils';\n\n// 不使用符号，方便跨 Realms\nexport const HANDLES_KEY = 'gem@storeHandlesKey';\n\nexport interface StoreTrait {\n  [HANDLES_KEY]: Set<Function>;\n}\n\nexport type Store<T> = T & StoreTrait;\n\nexport type StoreSet<T> = {\n  [P in keyof T]: T[P] & Store<T[P]>;\n};\n\nexport function createStore<T extends object>(originStore: T): Store<T> {\n  const store = originStore as Store<T>;\n  // 序列化时忽略\n  Object.defineProperty(store, HANDLES_KEY, { enumerable: false, value: new Set<Function>(), writable: true });\n  return store;\n}\n\nexport function createStoreSet<T extends object>(originStoreSet: T) {\n  const keys = Object.keys(originStoreSet);\n  keys.forEach(key => {\n    createStore(originStoreSet[key]);\n  });\n\n  return originStoreSet as StoreSet<T>;\n}\n\nexport function updateStore<T extends Store<unknown>>(store: T, value: Partial<Omit<T, keyof StoreTrait>>) {\n  Object.assign(store, value);\n  const listeners = store[HANDLES_KEY];\n  listeners.forEach(func => {\n    addMicrotask(func);\n  });\n}\n\nexport function connect<T extends Store<unknown>>(store: T, func: Function) {\n  const listeners = store[HANDLES_KEY];\n  listeners.add(func);\n}\n\nexport function disconnect<T extends Store<unknown>>(store: T, func: Function) {\n  const listeners = store[HANDLES_KEY];\n  listeners.delete(func);\n}\n","import { createStore, updateStore } from './store';\nimport { Storage, QueryString } from './utils';\n\nexport interface HistoryItemState {\n  $close: boolean;\n  $open: boolean;\n  $shouldClose: boolean;\n  $key: number;\n  [index: string]: any;\n}\nexport interface HistoryItem {\n  path: string;\n  query: string | QueryString;\n  hash: string;\n  title: string;\n  state: HistoryItemState;\n}\n\nexport interface HistoryStore {\n  list: HistoryItem[];\n  currentIndex: number;\n}\n\nconst historyState = createStore<HistoryStore>({\n  list: [{}] as HistoryItem[],\n  currentIndex: 0,\n});\n\nconst openHandleMap = new WeakMap<HistoryItemState, Function>();\nconst colseHandleMap = new WeakMap<HistoryItemState, Function>();\nconst shouldCloseHandleMap = new WeakMap<HistoryItemState, Function>();\n\nfunction generateState(data: any, open: Function, close: Function, shouldClose: Function): HistoryItemState {\n  if (data.$key) throw new Error('`$key` is not allowed');\n  if (data.$open) throw new Error('`$open` is not allowed');\n  if (data.$close) throw new Error('`$close` is not allowed');\n  if (data.$shouldClose) throw new Error('`$shouldClose` is not allowed');\n\n  const state: HistoryItemState = {\n    ...data,\n    $key: Date.now() + performance.now(),\n    $open: !!open,\n    $close: !!close,\n    $shouldClose: !!shouldClose,\n  };\n  openHandleMap.set(state, open);\n  colseHandleMap.set(state, close);\n  shouldCloseHandleMap.set(state, shouldClose);\n  return state;\n}\n\nexport interface Location {\n  path?: string;\n  query?: string | QueryString;\n  title?: string;\n  hash?: string;\n  open?: Function; // 按下前进键时执行\n  close?: Function; // 按下返回键时执行\n  shouldClose?: () => boolean; // 按下返回键时判断是否执行 close 函数，返回为 false 时不执行，并恢复 history\n  data?: any;\n}\n\nlet basePath = '';\n\nlet history = {\n  historyState,\n\n  get basePath() {\n    return basePath;\n  },\n\n  set basePath(v) {\n    const { list, currentIndex } = historyState;\n    // 应用初始化的时候设置\n    const location = list[currentIndex];\n    location.path = window.location.pathname.replace(new RegExp(`^${v}`), '');\n    updateStore(historyState, {});\n    basePath = v;\n  },\n\n  get location() {\n    const { list, currentIndex } = historyState;\n    const location = list[currentIndex];\n    return {\n      get query() {\n        return new QueryString(location.query);\n      },\n      hash: location.hash,\n      path: location.path,\n      state: location.state,\n      title: location.title,\n    };\n  },\n  forward() {\n    window.history.forward();\n  },\n  back() {\n    window.history.back();\n  },\n  push(options: Location) {\n    const { path, open, close, shouldClose } = options;\n    const query = options.query || '';\n    const hash = options.hash || '';\n    const title = options.title || '';\n    const data = options.data || {};\n\n    const state = generateState(data, open, close, shouldClose);\n\n    window.history.pushState(state, title, history.basePath + path + new QueryString(query) + hash);\n\n    const { list, currentIndex } = historyState;\n    if (hash !== list[currentIndex].hash) window.dispatchEvent(new CustomEvent('hashchange'));\n\n    const newList = list.slice(0, currentIndex + 1).concat({\n      state,\n      title,\n      path,\n      query,\n      hash,\n    });\n    updateStore(historyState, {\n      list: newList,\n      currentIndex: newList.length - 1,\n    });\n  },\n  // push 一条历史记录\n  // 有 close 处理函数时先执行 closeHandle 在 replace\n  // 比如在 modal 打开时跳转页面\n  // 不完美：只支持在 1 级 modal 中切换页面\n  pushWithoutCloseHandle(options: Location) {\n    const { list, currentIndex } = historyState;\n    const { state } = list[currentIndex];\n    if (state.$close) {\n      const closeHandle = colseHandleMap.get(state);\n      closeHandle();\n      history.replace(options);\n    } else {\n      history.push(options);\n    }\n  },\n  // 修改 url 意外的状态\n  pushState(options: Location) {\n    const { list, currentIndex } = historyState;\n    const { path, query, hash } = list[currentIndex];\n    history.push({\n      path,\n      query,\n      hash,\n      ...options,\n    });\n  },\n  replace(options: Location) {\n    const { path, open, close, shouldClose } = options;\n    const query = options.query || '';\n    const hash = options.hash || '';\n    const data = options.data || {};\n    const title = options.title || '';\n\n    const state = generateState(data, open, close, shouldClose);\n\n    window.history.replaceState(state, title, history.basePath + path + new QueryString(query) + hash);\n\n    const { list, currentIndex } = historyState;\n    if (hash !== list[currentIndex].hash) window.dispatchEvent(new CustomEvent('hashchange'));\n\n    list.splice(currentIndex, 1, {\n      state,\n      title,\n      path,\n      query,\n      hash,\n    });\n    updateStore(historyState, {\n      list,\n    });\n  },\n  // 修改 url 意外的状态\n  replaceState(options: Location) {\n    const { list, currentIndex } = historyState;\n    const { path, query, hash } = list[currentIndex];\n    history.replace({\n      path,\n      query,\n      hash,\n      ...options,\n    });\n  },\n};\n\ndeclare global {\n  interface Window {\n    __gemHistory: typeof history;\n  }\n}\n\nconst hasOtherHistory = !!window.__gemHistory;\n\nif (hasOtherHistory) {\n  history = window.__gemHistory;\n  const basePath = history.basePath;\n  Object.defineProperty(history, 'basePath', {\n    get() {\n      return basePath;\n    },\n    set() {\n      throw new Error('已经有其他环境使用 gem , 会共享 history 对象，禁止再修改 history 对象');\n    },\n  });\n} else {\n  window.__gemHistory = history;\n\n  if (!window.history.state) {\n    // 初始化 historyItem[]\n    const { pathname, search, hash } = window.location;\n    history.replace({ path: pathname, query: search, hash });\n  } else if (window.history.state.$close) {\n    // 有 handle 返回键的页面刷新\n    history.back();\n  }\n\n  const storage = new Storage<typeof historyState>();\n  const sessionStorageKey = 'gem@historyStateList';\n  updateStore(historyState, storage.getSession(sessionStorageKey));\n\n  window.addEventListener('unload', () => {\n    storage.setSession(sessionStorageKey, historyState);\n  });\n\n  /**\n   * 表示 popstate handler 中正在进行导航\n   */\n  let navigating = false;\n  window.addEventListener('popstate', event => {\n    if (!event.state || !event.state.$key) {\n      // 比如作为其他 app 的宿主 app\n      return;\n    }\n    if (navigating) {\n      navigating = false;\n      return;\n    }\n\n    // forward or back\n    // replace 不会触发\n\n    // url 变化前 historyItem\n    const { list, currentIndex } = historyState;\n\n    const { state: prevState } = list[currentIndex];\n    const newStateIndex = list.findIndex(({ state }) => state.$key === event.state.$key);\n\n    // gem app 嵌套 gem app，且不是同一个 history 对象时\n    if (newStateIndex === -1) return;\n\n    const { state: newState } = list[newStateIndex];\n\n    if (newStateIndex > currentIndex && newState.$open) {\n      // 返回键关闭的 modal 能前进键重新打开\n      // 刷新后不能工作：刷新后 historyItem 中只有 url\n      const openHandle = openHandleMap.get(newState);\n      if (openHandle) openHandle();\n    } else if (prevState.$close) {\n      const closeHandle = colseHandleMap.get(prevState);\n      const shouldCloseHandle = shouldCloseHandleMap.get(prevState);\n      const notAllowClose = shouldCloseHandle && !shouldCloseHandle();\n      if (notAllowClose) {\n        navigating = true;\n        history.forward(); // 将重新触发 popstate\n        return; // 历史记录栈位置没有变化，不需要后面的 updateStore\n      } else {\n        // handle 返回键\n        if (closeHandle) {\n          closeHandle();\n        } else {\n          // 有 modal 的页面刷新会执行 back 触发 popstate\n          // 如果是耳机 modal 页面刷新\n          // 则还需要进行一次 back\n          // 不完美：三级 modal 页面刷新不支持返回到初始页面\n          navigating = true;\n          history.back();\n        }\n      }\n    }\n\n    updateStore(historyState, {\n      currentIndex: newStateIndex,\n    });\n  });\n}\n\nexport { history };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment poisition.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceeding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceeding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        // If `value` isn't already a string, we explicitly convert it here in case\n        // it can't be implicitly converted - i.e. it's a symbol.\n        const valueAsString = typeof value === 'string' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.2');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { createMarker, directive, NodePart, removeNodes, reparentNodes } from '../lit-html.js';\n// Helper functions for manipulating parts\n// TODO(kschaaf): Refactor into Part API?\nconst createAndInsertPart = (containerPart, beforePart) => {\n    const container = containerPart.startNode.parentNode;\n    const beforeNode = beforePart === undefined ? containerPart.endNode :\n        beforePart.startNode;\n    const startNode = container.insertBefore(createMarker(), beforeNode);\n    container.insertBefore(createMarker(), beforeNode);\n    const newPart = new NodePart(containerPart.options);\n    newPart.insertAfterNode(startNode);\n    return newPart;\n};\nconst updatePart = (part, value) => {\n    part.setValue(value);\n    part.commit();\n    return part;\n};\nconst insertPartBefore = (containerPart, part, ref) => {\n    const container = containerPart.startNode.parentNode;\n    const beforeNode = ref ? ref.startNode : containerPart.endNode;\n    const endNode = part.endNode.nextSibling;\n    if (endNode !== beforeNode) {\n        reparentNodes(container, part.startNode, endNode, beforeNode);\n    }\n};\nconst removePart = (part) => {\n    removeNodes(part.startNode.parentNode, part.startNode, part.endNode.nextSibling);\n};\n// Helper for generating a map of array item to its index over a subset\n// of an array (used to lazily generate `newKeyToIndexMap` and\n// `oldKeyToIndexMap`)\nconst generateMap = (list, start, end) => {\n    const map = new Map();\n    for (let i = start; i <= end; i++) {\n        map.set(list[i], i);\n    }\n    return map;\n};\n// Stores previous ordered list of parts and map of key to index\nconst partListCache = new WeakMap();\nconst keyListCache = new WeakMap();\n/**\n * A directive that repeats a series of values (usually `TemplateResults`)\n * generated from an iterable, and updates those items efficiently when the\n * iterable changes based on user-provided `keys` associated with each item.\n *\n * Note that if a `keyFn` is provided, strict key-to-DOM mapping is maintained,\n * meaning previous DOM for a given key is moved into the new position if\n * needed, and DOM will never be reused with values for different keys (new DOM\n * will always be created for new keys). This is generally the most efficient\n * way to use `repeat` since it performs minimum unnecessary work for insertions\n * amd removals.\n *\n * IMPORTANT: If providing a `keyFn`, keys *must* be unique for all items in a\n * given call to `repeat`. The behavior when two or more items have the same key\n * is undefined.\n *\n * If no `keyFn` is provided, this directive will perform similar to mapping\n * items to values, and DOM will be reused against potentially different items.\n */\nexport const repeat = directive((items, keyFnOrTemplate, template) => {\n    let keyFn;\n    if (template === undefined) {\n        template = keyFnOrTemplate;\n    }\n    else if (keyFnOrTemplate !== undefined) {\n        keyFn = keyFnOrTemplate;\n    }\n    return (containerPart) => {\n        if (!(containerPart instanceof NodePart)) {\n            throw new Error('repeat can only be used in text bindings');\n        }\n        // Old part & key lists are retrieved from the last update\n        // (associated with the part for this instance of the directive)\n        const oldParts = partListCache.get(containerPart) || [];\n        const oldKeys = keyListCache.get(containerPart) || [];\n        // New part list will be built up as we go (either reused from\n        // old parts or created for new keys in this update). This is\n        // saved in the above cache at the end of the update.\n        const newParts = [];\n        // New value list is eagerly generated from items along with a\n        // parallel array indicating its key.\n        const newValues = [];\n        const newKeys = [];\n        let index = 0;\n        for (const item of items) {\n            newKeys[index] = keyFn ? keyFn(item, index) : index;\n            newValues[index] = template(item, index);\n            index++;\n        }\n        // Maps from key to index for current and previous update; these\n        // are generated lazily only when needed as a performance\n        // optimization, since they are only required for multiple\n        // non-contiguous changes in the list, which are less common.\n        let newKeyToIndexMap;\n        let oldKeyToIndexMap;\n        // Head and tail pointers to old parts and new values\n        let oldHead = 0;\n        let oldTail = oldParts.length - 1;\n        let newHead = 0;\n        let newTail = newValues.length - 1;\n        // Overview of O(n) reconciliation algorithm (general approach\n        // based on ideas found in ivi, vue, snabbdom, etc.):\n        //\n        // * We start with the list of old parts and new values (and\n        //   arrays of their respective keys), head/tail pointers into\n        //   each, and we build up the new list of parts by updating\n        //   (and when needed, moving) old parts or creating new ones.\n        //   The initial scenario might look like this (for brevity of\n        //   the diagrams, the numbers in the array reflect keys\n        //   associated with the old parts or new values, although keys\n        //   and parts/values are actually stored in parallel arrays\n        //   indexed using the same head/tail pointers):\n        //\n        //      oldHead v                 v oldTail\n        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n        //   newParts: [ ,  ,  ,  ,  ,  ,  ]\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6] <- reflects the user's new\n        //                                      item order\n        //      newHead ^                 ^ newTail\n        //\n        // * Iterate old & new lists from both sides, updating,\n        //   swapping, or removing parts at the head/tail locations\n        //   until neither head nor tail can move.\n        //\n        // * Example below: keys at head pointers match, so update old\n        //   part 0 in-place (no need to move it) and record part 0 in\n        //   the `newParts` list. The last thing we do is advance the\n        //   `oldHead` and `newHead` pointers (will be reflected in the\n        //   next diagram).\n        //\n        //      oldHead v                 v oldTail\n        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n        //   newParts: [0,  ,  ,  ,  ,  ,  ] <- heads matched: update 0\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n        //                                      & newHead\n        //      newHead ^                 ^ newTail\n        //\n        // * Example below: head pointers don't match, but tail\n        //   pointers do, so update part 6 in place (no need to move\n        //   it), and record part 6 in the `newParts` list. Last,\n        //   advance the `oldTail` and `oldHead` pointers.\n        //\n        //         oldHead v              v oldTail\n        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n        //   newParts: [0,  ,  ,  ,  ,  , 6] <- tails matched: update 6\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldTail\n        //                                      & newTail\n        //         newHead ^              ^ newTail\n        //\n        // * If neither head nor tail match; next check if one of the\n        //   old head/tail items was removed. We first need to generate\n        //   the reverse map of new keys to index (`newKeyToIndexMap`),\n        //   which is done once lazily as a performance optimization,\n        //   since we only hit this case if multiple non-contiguous\n        //   changes were made. Note that for contiguous removal\n        //   anywhere in the list, the head and tails would advance\n        //   from either end and pass each other before we get to this\n        //   case and removals would be handled in the final while loop\n        //   without needing to generate the map.\n        //\n        // * Example below: The key at `oldTail` was removed (no longer\n        //   in the `newKeyToIndexMap`), so remove that part from the\n        //   DOM and advance just the `oldTail` pointer.\n        //\n        //         oldHead v           v oldTail\n        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n        //   newParts: [0,  ,  ,  ,  ,  , 6] <- 5 not in new map: remove\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    5 and advance oldTail\n        //         newHead ^           ^ newTail\n        //\n        // * Once head and tail cannot move, any mismatches are due to\n        //   either new or moved items; if a new key is in the previous\n        //   \"old key to old index\" map, move the old part to the new\n        //   location, otherwise create and insert a new part. Note\n        //   that when moving an old part we null its position in the\n        //   oldParts array if it lies between the head and tail so we\n        //   know to skip it when the pointers get there.\n        //\n        // * Example below: neither head nor tail match, and neither\n        //   were removed; so find the `newHead` key in the\n        //   `oldKeyToIndexMap`, and move that old part's DOM into the\n        //   next head position (before `oldParts[oldHead]`). Last,\n        //   null the part in the `oldPart` array since it was\n        //   somewhere in the remaining oldParts still to be scanned\n        //   (between the head and tail pointers) so that we know to\n        //   skip that old part on future iterations.\n        //\n        //         oldHead v        v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2,  ,  ,  ,  , 6] <- stuck: update & move 2\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    into place and advance\n        //                                      newHead\n        //         newHead ^           ^ newTail\n        //\n        // * Note that for moves/insertions like the one above, a part\n        //   inserted at the head pointer is inserted before the\n        //   current `oldParts[oldHead]`, and a part inserted at the\n        //   tail pointer is inserted before `newParts[newTail+1]`. The\n        //   seeming asymmetry lies in the fact that new parts are\n        //   moved into place outside in, so to the right of the head\n        //   pointer are old parts, and to the right of the tail\n        //   pointer are new parts.\n        //\n        // * We always restart back from the top of the algorithm,\n        //   allowing matching and simple updates in place to\n        //   continue...\n        //\n        // * Example below: the head pointers once again match, so\n        //   simply update part 1 and record it in the `newParts`\n        //   array.  Last, advance both head pointers.\n        //\n        //         oldHead v        v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2, 1,  ,  ,  , 6] <- heads matched: update 1\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n        //                                      & newHead\n        //            newHead ^        ^ newTail\n        //\n        // * As mentioned above, items that were moved as a result of\n        //   being stuck (the final else clause in the code below) are\n        //   marked with null, so we always advance old pointers over\n        //   these so we're comparing the next actual old value on\n        //   either end.\n        //\n        // * Example below: `oldHead` is null (already placed in\n        //   newParts), so advance `oldHead`.\n        //\n        //            oldHead v     v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6] <- old head already used:\n        //   newParts: [0, 2, 1,  ,  ,  , 6]    advance oldHead\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n        //               newHead ^     ^ newTail\n        //\n        // * Note it's not critical to mark old parts as null when they\n        //   are moved from head to tail or tail to head, since they\n        //   will be outside the pointer range and never visited again.\n        //\n        // * Example below: Here the old tail key matches the new head\n        //   key, so the part at the `oldTail` position and move its\n        //   DOM to the new head position (before `oldParts[oldHead]`).\n        //   Last, advance `oldTail` and `newHead` pointers.\n        //\n        //               oldHead v  v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2, 1, 4,  ,  , 6] <- old tail matches new\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]   head: update & move 4,\n        //                                     advance oldTail & newHead\n        //               newHead ^     ^ newTail\n        //\n        // * Example below: Old and new head keys match, so update the\n        //   old head part in place, and advance the `oldHead` and\n        //   `newHead` pointers.\n        //\n        //               oldHead v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2, 1, 4, 3,   ,6] <- heads match: update 3\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance oldHead &\n        //                                      newHead\n        //                  newHead ^  ^ newTail\n        //\n        // * Once the new or old pointers move past each other then all\n        //   we have left is additions (if old list exhausted) or\n        //   removals (if new list exhausted). Those are handled in the\n        //   final while loops at the end.\n        //\n        // * Example below: `oldHead` exceeded `oldTail`, so we're done\n        //   with the main loop.  Create the remaining part and insert\n        //   it at the new head position, and the update is complete.\n        //\n        //                   (oldHead > oldTail)\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2, 1, 4, 3, 7 ,6] <- create and insert 7\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n        //                     newHead ^ newTail\n        //\n        // * Note that the order of the if/else clauses is not\n        //   important to the algorithm, as long as the null checks\n        //   come first (to ensure we're always working on valid old\n        //   parts) and that the final else clause comes last (since\n        //   that's where the expensive moves occur). The order of\n        //   remaining clauses is is just a simple guess at which cases\n        //   will be most common.\n        //\n        // * TODO(kschaaf) Note, we could calculate the longest\n        //   increasing subsequence (LIS) of old items in new position,\n        //   and only move those not in the LIS set. However that costs\n        //   O(nlogn) time and adds a bit more code, and only helps\n        //   make rare types of mutations require fewer moves. The\n        //   above handles removes, adds, reversal, swaps, and single\n        //   moves of contiguous items in linear time, in the minimum\n        //   number of moves. As the number of multiple moves where LIS\n        //   might help approaches a random shuffle, the LIS\n        //   optimization becomes less helpful, so it seems not worth\n        //   the code at this point. Could reconsider if a compelling\n        //   case arises.\n        while (oldHead <= oldTail && newHead <= newTail) {\n            if (oldParts[oldHead] === null) {\n                // `null` means old part at head has already been used\n                // below; skip\n                oldHead++;\n            }\n            else if (oldParts[oldTail] === null) {\n                // `null` means old part at tail has already been used\n                // below; skip\n                oldTail--;\n            }\n            else if (oldKeys[oldHead] === newKeys[newHead]) {\n                // Old head matches new head; update in place\n                newParts[newHead] =\n                    updatePart(oldParts[oldHead], newValues[newHead]);\n                oldHead++;\n                newHead++;\n            }\n            else if (oldKeys[oldTail] === newKeys[newTail]) {\n                // Old tail matches new tail; update in place\n                newParts[newTail] =\n                    updatePart(oldParts[oldTail], newValues[newTail]);\n                oldTail--;\n                newTail--;\n            }\n            else if (oldKeys[oldHead] === newKeys[newTail]) {\n                // Old head matches new tail; update and move to new tail\n                newParts[newTail] =\n                    updatePart(oldParts[oldHead], newValues[newTail]);\n                insertPartBefore(containerPart, oldParts[oldHead], newParts[newTail + 1]);\n                oldHead++;\n                newTail--;\n            }\n            else if (oldKeys[oldTail] === newKeys[newHead]) {\n                // Old tail matches new head; update and move to new head\n                newParts[newHead] =\n                    updatePart(oldParts[oldTail], newValues[newHead]);\n                insertPartBefore(containerPart, oldParts[oldTail], oldParts[oldHead]);\n                oldTail--;\n                newHead++;\n            }\n            else {\n                if (newKeyToIndexMap === undefined) {\n                    // Lazily generate key-to-index maps, used for removals &\n                    // moves below\n                    newKeyToIndexMap = generateMap(newKeys, newHead, newTail);\n                    oldKeyToIndexMap = generateMap(oldKeys, oldHead, oldTail);\n                }\n                if (!newKeyToIndexMap.has(oldKeys[oldHead])) {\n                    // Old head is no longer in new list; remove\n                    removePart(oldParts[oldHead]);\n                    oldHead++;\n                }\n                else if (!newKeyToIndexMap.has(oldKeys[oldTail])) {\n                    // Old tail is no longer in new list; remove\n                    removePart(oldParts[oldTail]);\n                    oldTail--;\n                }\n                else {\n                    // Any mismatches at this point are due to additions or\n                    // moves; see if we have an old part we can reuse and move\n                    // into place\n                    const oldIndex = oldKeyToIndexMap.get(newKeys[newHead]);\n                    const oldPart = oldIndex !== undefined ? oldParts[oldIndex] : null;\n                    if (oldPart === null) {\n                        // No old part for this value; create a new one and\n                        // insert it\n                        const newPart = createAndInsertPart(containerPart, oldParts[oldHead]);\n                        updatePart(newPart, newValues[newHead]);\n                        newParts[newHead] = newPart;\n                    }\n                    else {\n                        // Reuse old part\n                        newParts[newHead] =\n                            updatePart(oldPart, newValues[newHead]);\n                        insertPartBefore(containerPart, oldPart, oldParts[oldHead]);\n                        // This marks the old part as having been used, so that\n                        // it will be skipped in the first two checks above\n                        oldParts[oldIndex] = null;\n                    }\n                    newHead++;\n                }\n            }\n        }\n        // Add parts for any remaining new values\n        while (newHead <= newTail) {\n            // For all remaining additions, we insert before last new\n            // tail, since old pointers are no longer valid\n            const newPart = createAndInsertPart(containerPart, newParts[newTail + 1]);\n            updatePart(newPart, newValues[newHead]);\n            newParts[newHead++] = newPart;\n        }\n        // Remove any remaining unused old parts\n        while (oldHead <= oldTail) {\n            const oldPart = oldParts[oldHead++];\n            if (oldPart !== null) {\n                removePart(oldPart);\n            }\n        }\n        // Save order of new parts for next round\n        partListCache.set(containerPart, newParts);\n        keyListCache.set(containerPart, newKeys);\n    };\n});\n//# sourceMappingURL=repeat.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { directive } from '../lit-html.js';\nconst previousValues = new WeakMap();\n/**\n * Prevents re-render of a template function until a single value or an array of\n * values changes.\n *\n * Example:\n *\n * ```js\n * html`\n *   <div>\n *     ${guard([user.id, company.id], () => html`...`)}\n *   </div>\n * ```\n *\n * In this case, the template only renders if either `user.id` or `company.id`\n * changes.\n *\n * guard() is useful with immutable data patterns, by preventing expensive work\n * until data updates.\n *\n * Example:\n *\n * ```js\n * html`\n *   <div>\n *     ${guard([immutableItems], () => immutableItems.map(i => html`${i}`))}\n *   </div>\n * ```\n *\n * In this case, items are mapped over only when the array reference changes.\n *\n * @param value the value to check before re-rendering\n * @param f the template function\n */\nexport const guard = directive((value, f) => (part) => {\n    const previousValue = previousValues.get(part);\n    if (Array.isArray(value)) {\n        // Dirty-check arrays by item\n        if (Array.isArray(previousValue) &&\n            previousValue.length === value.length &&\n            value.every((v, i) => v === previousValue[i])) {\n            return;\n        }\n    }\n    else if (previousValue === value &&\n        (value !== undefined || previousValues.has(part))) {\n        // Dirty-check non-arrays by identity\n        return;\n    }\n    part.setValue(f());\n    // Copy the value if it's an array so that if it's mutated we don't forget\n    // what the previous values were.\n    previousValues.set(part, Array.isArray(value) ? Array.from(value) : value);\n});\n//# sourceMappingURL=guard.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, directive } from '../lit-html.js';\n/**\n * For AttributeParts, sets the attribute if the value is defined and removes\n * the attribute if the value is undefined.\n *\n * For other part types, this directive is a no-op.\n */\nexport const ifDefined = directive((value) => (part) => {\n    if (value === undefined && part instanceof AttributePart) {\n        if (value !== part.value) {\n            const name = part.committer.name;\n            part.committer.element.removeAttribute(name);\n        }\n    }\n    else {\n        part.setValue(value);\n    }\n});\n//# sourceMappingURL=if-defined.js.map","/* eslint-disable @typescript-eslint/no-empty-function */\n\nimport * as lit from 'lit-html';\nimport { TemplateResult } from 'lit-html';\nimport { connect, disconnect, HANDLES_KEY, Store } from './store';\nimport { Pool, addMicrotask, Sheet, camelToKebabCase, kebabToCamelCase, deleteSubArr } from './utils';\n\nimport { repeat as litRepeat } from 'lit-html/directives/repeat';\nimport { guard as litGuard } from 'lit-html/directives/guard';\nimport { ifDefined as litIfDefined } from 'lit-html/directives/if-defined';\n\nlet litHtml = {\n  html: lit.html,\n  svg: lit.svg,\n  render: lit.render,\n  directive: lit.directive,\n  repeat: litRepeat,\n  guard: litGuard,\n  ifDefined: litIfDefined,\n};\n\ndeclare global {\n  interface Window {\n    __litHtml: typeof litHtml;\n  }\n}\n\nif (window.__litHtml) {\n  // 自定义元素不能重复定义\n  // 所以嵌套 gem app 中导出的自定义元素类可能是之前定义的类\n  // 可能造成使用的 html 对象不是同一个\n  // map, 缓存之类的会变得不同\n  // 所以需要把他们放在全局对象中\n  litHtml = window.__litHtml;\n} else {\n  window.__litHtml = litHtml;\n}\n\nconst { html, svg, render, directive, repeat, guard, ifDefined } = litHtml;\nexport { html, svg, render, directive, repeat, guard, ifDefined, TemplateResult };\n\n// final 字段如果使用 symbol 或者 private 将导致 modal-base 生成匿名子类 declaration 失败\nexport abstract class BaseElement<T = {}> extends HTMLElement {\n  static observedAttributes: string[]; // WebAPI 中是实时检查这个列表\n  static observedPropertys: string[];\n  static observedStores: Store<unknown>[];\n  static adoptedStyleSheets: (CSSStyleSheet | Sheet<unknown>)[];\n\n  readonly state: T;\n\n  /**@final */\n  __renderRoot: HTMLElement | ShadowRoot;\n  /**@final */\n  __isMounted: boolean;\n\n  constructor(shadow = true) {\n    super();\n    this.setState = this.setState.bind(this);\n    this.willMount = this.willMount.bind(this);\n    this.render = this.render.bind(this);\n    this.mounted = this.mounted.bind(this);\n    this.shouldUpdate = this.shouldUpdate.bind(this);\n    this.__update = this.__update.bind(this);\n    this.updated = this.updated.bind(this);\n    this.__connectAttribute = this.__connectAttribute.bind(this);\n    this.__disconnectAttribute = this.__disconnectAttribute.bind(this);\n    this.__connectProperty = this.__connectProperty.bind(this);\n    this.__disconnectProperty = this.__disconnectProperty.bind(this);\n    this.__connectStore = this.__connectStore.bind(this);\n    this.__disconnectStore = this.__disconnectStore.bind(this);\n    this.attributeChanged = this.attributeChanged.bind(this);\n    this.propertyChanged = this.propertyChanged.bind(this);\n    this.unmounted = this.unmounted.bind(this);\n\n    this.__renderRoot = shadow ? this.attachShadow({ mode: 'open' }) : this;\n    const { observedAttributes, observedPropertys, observedStores, adoptedStyleSheets } = new.target;\n    if (observedAttributes) {\n      observedAttributes.forEach(attr => {\n        this.__connectAttribute(attr, true);\n      });\n    }\n    if (observedPropertys) {\n      observedPropertys.forEach(prop => {\n        this.__connectProperty(prop);\n      });\n    }\n    if (observedStores) {\n      observedStores.forEach(store => {\n        this.__connectStore(store);\n      });\n    }\n    if (adoptedStyleSheets) {\n      if (this.shadowRoot) {\n        this.shadowRoot.adoptedStyleSheets = adoptedStyleSheets;\n      } else {\n        document.adoptedStyleSheets = document.adoptedStyleSheets.concat(adoptedStyleSheets);\n      }\n    }\n  }\n\n  /**@final */\n  setState(payload: Partial<T>) {\n    Object.assign(this.state, payload);\n    addMicrotask(this.__update);\n  }\n\n  /**@lifecycle */\n  willMount() {}\n\n  /**@lifecycle */\n  render() {\n    return html`\n      <slot></slot>\n    `;\n  }\n\n  /**@lifecycle */\n  mounted() {}\n\n  /**@lifecycle */\n  shouldUpdate() {\n    return true;\n  }\n\n  /**@final */\n  __update() {\n    if (this.__isMounted && this.shouldUpdate()) {\n      render(this.render(), this.__renderRoot);\n      this.updated();\n    }\n  }\n\n  /**@helper */\n  update() {\n    this.__update();\n  }\n\n  /**@lifecycle */\n  updated() {}\n\n  /**@final */\n  __connectAttribute(str: string, isAttr = false) {\n    const prop = isAttr ? kebabToCamelCase(str) : str;\n    const attr = isAttr ? str : camelToKebabCase(prop);\n    if (typeof this[prop] === 'function') {\n      throw `Don't use attribute with the same name as native methods`;\n    }\n    // Native attribute，no need difine property\n    // e.g: `id`, `title`, `hidden`, `alt`, `lang`\n    if (this[prop] !== undefined) return;\n    const con = this.constructor as typeof BaseElement;\n    if (!con.observedAttributes) con.observedAttributes = [];\n    con.observedAttributes.push(attr);\n    // !!! Custom property shortcut access only supports `string` type\n    Object.defineProperty(this, prop, {\n      configurable: true,\n      get() {\n        // Return empty string if attribute does not exist\n        return this.getAttribute(attr) || '';\n      },\n      set(v: string) {\n        if (v === null) {\n          this.removeAttribute(attr);\n        } else {\n          this.setAttribute(attr, v);\n        }\n      },\n    });\n  }\n  /**@helper */\n  connectAttribute(str: string, isAttr = false) {\n    this.__connectAttribute(str, isAttr);\n  }\n\n  /**@final */\n  __disconnectAttribute(str: string, isAttr = false) {\n    const prop = isAttr ? kebabToCamelCase(str) : str;\n    const attr = isAttr ? str : camelToKebabCase(prop);\n    Object.defineProperty(this, prop, { configurable: true, enumerable: true, writable: true });\n    const con = this.constructor as typeof BaseElement;\n    con.observedAttributes = deleteSubArr(con.observedAttributes, [attr]);\n  }\n  /**@helper */\n  disconnectAttribute(str: string, isAttr = false) {\n    this.__disconnectAttribute(str, isAttr);\n  }\n\n  /**@final */\n  __connectProperty(prop: string) {\n    if (prop in this) return;\n    const con = this.constructor as typeof BaseElement;\n    if (!con.observedPropertys) con.observedPropertys = [];\n    con.observedPropertys.push(prop);\n    let propValue: any = this[prop];\n    Object.defineProperty(this, prop, {\n      configurable: true,\n      get() {\n        return propValue;\n      },\n      set(v) {\n        if (v !== propValue) {\n          propValue = v;\n          if (this.__isMounted) {\n            this.propertyChanged(prop, propValue, v);\n            addMicrotask(this.__update);\n          }\n        }\n      },\n    });\n  }\n  /**@helper */\n  connectProperty(prop: string) {\n    this.__connectProperty(prop);\n  }\n\n  /**@final */\n  __disconnectProperty(prop: string) {\n    Object.defineProperty(this, prop, { configurable: true, enumerable: true, writable: true });\n    const con = this.constructor as typeof BaseElement;\n    con.observedPropertys = deleteSubArr(con.observedPropertys, [prop]);\n  }\n  /**@helper */\n  disconnectPropertys(prop: string) {\n    this.__disconnectProperty(prop);\n  }\n\n  /**@final */\n  __connectStore(store: Store<unknown>) {\n    if (!store[HANDLES_KEY]) {\n      throw new Error('`observedStores` only support store module');\n    }\n\n    const con = this.constructor as typeof BaseElement;\n    if (!con.observedStores) con.observedStores = [];\n    con.observedStores.push(store);\n    connect(store, this.__update);\n  }\n  /**@helper */\n  connectStore(store: Store<unknown>) {\n    this.__connectStore(store);\n  }\n\n  /**@final */\n  __disconnectStore(store: Store<unknown>) {\n    disconnect(store, this.__update);\n    const con = this.constructor as typeof BaseElement;\n    con.observedStores = deleteSubArr(con.observedStores, [store]);\n  }\n  /**@helper */\n  disconnectStore(store: Store<unknown>) {\n    this.__disconnectStore(store);\n  }\n\n  // 同步触发\n  /**@lifecycle */\n  propertyChanged(_name: string, _oldValue: any, _newValue: any) {}\n  // 异步触发\n  /**@lifecycle */\n  attributeChanged(_name: string, _oldValue: string, _newValue: string) {}\n\n  /**@lifecycle */\n  unmounted() {}\n\n  /**@private */\n  /**@final */\n  attributeChangedCallback(name: string, oldValue: string, newValue: string) {\n    if (this.__isMounted) {\n      this.attributeChanged(name, oldValue, newValue);\n      addMicrotask(this.__update);\n    }\n  }\n\n  /**@private */\n  /**@final */\n  // adoptedCallback() {}\n\n  /**@private */\n  /**@final */\n  disconnectedCallback() {\n    const constructor = this.constructor as typeof BaseElement;\n    if (constructor.observedStores) {\n      constructor.observedStores.forEach(store => {\n        disconnect(store, this.__update);\n      });\n    }\n    this.unmounted();\n    this.__isMounted = false;\n  }\n}\n\nexport abstract class GemElement<T = {}> extends BaseElement<T> {\n  /**@private */\n  /**@final */\n  connectedCallback() {\n    this.willMount();\n    render(this.render(), this.__renderRoot);\n    this.mounted();\n    this.__isMounted = true;\n  }\n}\n\n// global render task pool\nconst renderTaskPool = new Pool<Function>();\nlet loop = false;\nconst tick = () => {\n  window.requestAnimationFrame(function callback(timestamp) {\n    const task = renderTaskPool.get();\n    if (task) {\n      task();\n      if (performance.now() - timestamp < 16) {\n        callback(timestamp);\n        return;\n      }\n    }\n    // `renderTaskPool` not empty\n    if (loop) {\n      tick();\n    }\n  });\n};\nrenderTaskPool.addEventListener('start', () => {\n  loop = true;\n  tick();\n});\nrenderTaskPool.addEventListener('end', () => (loop = false));\n\nexport abstract class AsyncGemElement<T = {}> extends BaseElement<T> {\n  /**@final */\n  __update() {\n    renderTaskPool.add(() => {\n      if (this.shouldUpdate()) {\n        render(this.render(), this.__renderRoot);\n        this.updated();\n      }\n    });\n  }\n\n  /**@private */\n  /**@final */\n  connectedCallback() {\n    this.willMount();\n    renderTaskPool.add(() => {\n      render(this.render(), this.__renderRoot);\n      this.mounted();\n      this.__isMounted = true;\n    });\n  }\n}\n\n// 重写了全局 customElements\n// 原因是方便多个独立 app 同时使用 gem\n// 用户使用和 gem 同名的元素不会生效也不会报错\nconst define = customElements.define.bind(customElements);\ncustomElements.define = function(\n  tagName: string,\n  Class: typeof GemElement | typeof AsyncGemElement,\n  options?: ElementDefinitionOptions,\n) {\n  if (!customElements.get(tagName)) {\n    define(tagName, Class, options);\n  }\n};\n","import { GemElement, html, customElement } from '../..';\n\nconst getGitPageUrl = (name: string) => `../${name}/index.html`;\n\n@customElement('app-root')\nclass App extends GemElement {\n  render = () => {\n    const examples = process.env.EXAMPLES.split(',');\n    return html`\n      <dl>\n        <dt>version:</dt>\n        <dd>${process.env.npm_package_version}</dd>\n        ${examples.map(\n          name => html`\n            <dt>${name}:</dt>\n            <dd><a href=${getGitPageUrl(name)}>${new URL(getGitPageUrl(name), location.href)}</a></dd>\n          `,\n        )}\n      </dl>\n    `;\n  };\n}\n\ndocument.body.append(new App());\n","import { BaseElement } from './element';\nimport { Store } from './store';\nimport { Sheet } from './utils';\n\nexport function attribute(target: BaseElement, attr: string): any {\n  target.connectAttribute(attr);\n}\nexport function property(target: BaseElement, prop: string): any {\n  target.connectProperty(prop);\n}\nexport function customElement(name: string) {\n  return function(cls: Function) {\n    customElements.define(name, cls);\n  };\n}\nexport function adoptedStyle(style: CSSStyleSheet | Sheet<unknown>) {\n  return function(cls: Function) {\n    const c = cls as typeof BaseElement;\n    if (!c.adoptedStyleSheets) c.adoptedStyleSheets = [];\n    c.adoptedStyleSheets.push(style);\n  };\n}\nexport function connectStore(store: Store<unknown>) {\n  // 这里的签名该怎么写？\n  return function(cls: Function) {\n    const c = cls as typeof BaseElement;\n    if (!c.observedStores) c.observedStores = [];\n    c.observedStores.push(store);\n  };\n}\n"],"sourceRoot":""}